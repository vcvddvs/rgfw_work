{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { ElForm, ElFormItem, ElInput, ElButton, ElMessage } from 'element-plus';\nimport { userApi } from '@/utils/api';\nimport { setToken } from '@/utils/auth';\nexport default {\n  __name: 'loginComponent',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const router = useRouter();\n    const userId = ref('');\n    const password = ref('');\n    const login = async () => {\n      try {\n        if (!userId.value || !password.value) {\n          ElMessage.error('请输入账号和密码');\n          return;\n        }\n\n        // 打印请求数据\n        console.log('发送登录请求:', {\n          userId: userId.value,\n          password: password.value\n        });\n        const response = await userApi.login({\n          userId: userId.value,\n          password: password.value\n        });\n        console.log('收到响应:', response);\n        if (response && response.success === true) {\n          const token = response.data;\n\n          // 验证token\n          if (typeof token === 'string' && token.length > 0) {\n            console.log('获取到有效token');\n\n            // 保存认证信息\n            setToken(token);\n            localStorage.setItem('userId', userId.value);\n            ElMessage.success('登录成功');\n            router.push('/Index-Component');\n            return;\n          } else {\n            console.error('Token无效:', token);\n            ElMessage.error('登录失败：无效的认证信息');\n            return;\n          }\n        }\n\n        // 如果没有在上面返回，说明登录失败\n        console.error('登录失败，响应数据:', response);\n        ElMessage.error(response?.message || '登录失败，请检查用户名和密码');\n      } catch (error) {\n        // 详细的错误日志\n        console.error('登录异常:', error);\n        if (error.response) {\n          switch (error.response.status) {\n            case 400:\n              ElMessage.error('请求参数错误');\n              break;\n            case 401:\n              ElMessage.error('用户名或密码错误');\n              break;\n            case 403:\n              ElMessage.error('没有访问权限');\n              break;\n            case 500:\n              ElMessage.error('服务器内部错误');\n              break;\n            default:\n              ElMessage.error(`登录失败 (${error.response.status})`);\n          }\n        } else if (error.request) {\n          ElMessage.error('无法连接到服务器，请检查网络');\n        } else {\n          ElMessage.error('登录请求失败：' + error.message);\n        }\n      }\n    };\n    const register = () => {\n      router.push('/Register-component');\n    };\n    const __returned__ = {\n      router,\n      userId,\n      password,\n      login,\n      register,\n      ref,\n      get useRouter() {\n        return useRouter;\n      },\n      get ElForm() {\n        return ElForm;\n      },\n      get ElFormItem() {\n        return ElFormItem;\n      },\n      get ElInput() {\n        return ElInput;\n      },\n      get ElButton() {\n        return ElButton;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      get userApi() {\n        return userApi;\n      },\n      get setToken() {\n        return setToken;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","useRouter","ElForm","ElFormItem","ElInput","ElButton","ElMessage","userApi","setToken","router","userId","password","login","value","error","console","log","response","success","token","data","length","localStorage","setItem","push","message","status","request","register"],"sources":["D:/back_elm/vue_elm/src/components/loginComponent.vue"],"sourcesContent":["<template>\n  <el-form class=\"wrapper\" @submit.prevent=\"login\">\n    <div class=\"header\">\n      <img :src=\"require('@/assets/img_1.png')\"\n           height=\"70px\"\n           width=\"100px\" alt=\"描述\"\n      />\n      <p>欢迎使用  饿了么</p>\n    </div>\n    <h>\n      <img :src=\"require('@/assets/elm_title.gif')\"\n           height=\"100%\"\n           width=\"100%\" alt=\"描述\"\n      />\n    </h>\n    <el-form-item label=\"账户:\">\n      <el-input v-model=\"userId\" placeholder=\"账户\"></el-input>\n    </el-form-item>\n    <el-form-item label=\"密码：\">\n      <el-input type=\"password\" v-model=\"password\" placeholder=\"密码\"></el-input>\n    </el-form-item>\n    <div class=\"button-box\">\n      <el-button type=\"primary\" @click=\"login\" style=\"width: 75%;margin-left: 25px;;margin-bottom: 10px; background-color: #409EFF;\">登录</el-button>\n    </div>\n    <div class=\"button-box\">\n      <el-button @click=\"register\" style=\"width: 75%;margin-left: 25px\">注册</el-button>\n    </div>\n\n  </el-form>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { ElForm, ElFormItem, ElInput, ElButton, ElMessage } from 'element-plus';\nimport { userApi } from '@/utils/api';\nimport { setToken } from '@/utils/auth';\n\nconst router = useRouter();\nconst userId = ref('');\nconst password = ref('');\n\nconst login = async () => {\n  try {\n    if (!userId.value || !password.value) {\n      ElMessage.error('请输入账号和密码');\n      return;\n    }\n\n    // 打印请求数据\n    console.log('发送登录请求:', {\n      userId: userId.value,\n      password: password.value\n    });\n\n    const response = await userApi.login({\n      userId: userId.value,\n      password: password.value\n    });\n\n    console.log('收到响应:', response);\n\n    if (response && response.success === true) {\n      const token = response.data;\n      \n      // 验证token\n      if (typeof token === 'string' && token.length > 0) {\n        console.log('获取到有效token');\n        \n        // 保存认证信息\n        setToken(token);\n        localStorage.setItem('userId', userId.value);\n        \n        ElMessage.success('登录成功');\n        router.push('/Index-Component');\n        return;\n      } else {\n        console.error('Token无效:', token);\n        ElMessage.error('登录失败：无效的认证信息');\n        return;\n      }\n    }\n\n    // 如果没有在上面返回，说明登录失败\n    console.error('登录失败，响应数据:', response);\n    ElMessage.error(response?.message || '登录失败，请检查用户名和密码');\n\n  } catch (error) {\n    // 详细的错误日志\n    console.error('登录异常:', error);\n\n    if (error.response) {\n      switch (error.response.status) {\n        case 400:\n          ElMessage.error('请求参数错误');\n          break;\n        case 401:\n          ElMessage.error('用户名或密码错误');\n          break;\n        case 403:\n          ElMessage.error('没有访问权限');\n          break;\n        case 500:\n          ElMessage.error('服务器内部错误');\n          break;\n        default:\n          ElMessage.error(`登录失败 (${error.response.status})`);\n      }\n    } else if (error.request) {\n      ElMessage.error('无法连接到服务器，请检查网络');\n    } else {\n      ElMessage.error('登录请求失败：' + error.message);\n    }\n  }\n};\n\nconst register = () => {\n  router.push('/Register-component');\n};\n\n</script>\n\n<style scoped>\n.wrapper {\n  width: 100%;\n  height: 100%;\n}\n\n/*顶部样式*/\n.button-box button:hover {\n  color: #17BAF9; /* 鼠标悬停时的背景色 */\n}\n\n.button-box button:active {\n  background-color: #288b52; /* 鼠标点击时的背景色 */\n}\n\n/*logo样式*/\n.wrapper .header {\n  width: 100%;\n  display: flex;\n  color: white;\n  align-items: center;\n  margin-left: 30px;\n\n\n}\n\n.wrapper .header p {\n  font-size: 5vw;\n  font-weight: bolder;\n  color: #17BAF9;\n}\n\n/*主体部分*/\n.wrapper .body .logins div {\n  display: flex;\n  box-sizing: border-box;\n  padding: 4vw 3vw 0 3vw;\n  align-items: center;\n}\n\n/* 定义输入框的基本样式 */\n.el-input__inner {\n  border: none; /* 移除输入框的边框 */\n  border-bottom: 2px solid #dcdfe6; /* 设置底部边框 */\n  border-radius: 0; /* 移除圆角 */\n  transition: border-color 0.3s; /* 平滑过渡效果 */\n}\n\n/* 定义输入框的 hover 状态 */\n.el-input__inner:hover {\n  border-color: #409EFF; /* 鼠标悬停时的边框颜色 */\n}\n\n/* 定义输入框的 focus 状态 */\n.el-input__inner:focus {\n  border-color: #409EFF; /* 输入框聚焦时的边框颜色 */\n  box-shadow: 0 0 5px rgba(64, 158, 255, 0.5); /* 添加阴影效果 */\n}\n\n.wrapper .body .logins div .content input {\n  border: none;\n  outline: none;\n  height: 6vw;\n  background-color: white;\n}\n\n.wrapper .body .button-box button {\n  font-size: 5vw;\n  width: 100%;\n  font-weight: 700;\n  color: white;\n  background-color: #38ca73;\n  border: none;\n  border-radius: 15px;\n  height: 10vw;\n}\n\n\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}