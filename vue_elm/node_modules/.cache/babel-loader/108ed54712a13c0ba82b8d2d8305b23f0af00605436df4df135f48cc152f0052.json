{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { deliveryAddressApi } from '@/utils/api';\nimport router from \"@/router\";\nimport axios from 'axios';\nexport default {\n  __name: 'addressComponent',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const route = useRoute();\n    const userId = ref(route.params.userId);\n    const businessId = ref(route.params.businessId);\n    const businessName = ref(route.params.businessName);\n    const deliveryAddresses = ref([]);\n    const fetchDeliveryAddresses = async () => {\n      if (!userId.value) {\n        console.error('用户ID未提供');\n        return;\n      }\n      try {\n        console.log('获取用户地址，userId:', userId.value);\n\n        // 尝试API获取数据，先清空数组\n        deliveryAddresses.value = [];\n\n        // 尝试从服务器获取地址\n        let fetchedFromServer = false;\n\n        // 1. 先尝试使用标准接口\n        try {\n          console.log('尝试使用标准接口获取地址数据');\n          const response = await deliveryAddressApi.getDeliveryAddressesByUserId(userId.value);\n          console.log('标准接口响应:', response);\n\n          // 处理响应数据\n          if (Array.isArray(response) && response.length > 0) {\n            // 响应直接是数组\n            deliveryAddresses.value = response;\n            console.log('成功获取到地址列表(直接数组):', response.length, '个地址');\n            fetchedFromServer = true;\n          } else if (response && response.code === 1 && Array.isArray(response.data) && response.data.length > 0) {\n            // 响应是标准Result格式，data是数组\n            deliveryAddresses.value = response.data;\n            console.log('成功获取到地址列表(Result格式):', response.data.length, '个地址');\n            fetchedFromServer = true;\n          } else if (response && typeof response === 'object' && response.daId) {\n            // 响应是单个地址对象\n            deliveryAddresses.value = [response];\n            console.log('成功获取到单个地址(对象)');\n            fetchedFromServer = true;\n          }\n        } catch (standardError) {\n          console.warn('标准接口请求失败:', standardError);\n\n          // 2. 如果标准接口失败，尝试测试接口\n          try {\n            console.log('尝试使用测试接口获取地址数据');\n            const testResponse = await deliveryAddressApi.testGetDeliveryAddresses(userId.value);\n            console.log('测试接口响应:', testResponse);\n            if (testResponse && testResponse.addresses && Array.isArray(testResponse.addresses) && testResponse.addresses.length > 0) {\n              deliveryAddresses.value = testResponse.addresses;\n              console.log('通过测试接口成功获取到地址数据:', deliveryAddresses.value.length, '个地址');\n              fetchedFromServer = true;\n            }\n          } catch (testError) {\n            console.warn('测试接口请求也失败:', testError);\n\n            // 3. 尝试直接调用服务\n            try {\n              console.log('尝试直接调用地址服务');\n              const directResponse = await axios.get(`http://localhost:8086/deliveryAddress/listByUserId/${userId.value}`, {\n                headers: {\n                  'Authorization': localStorage.getItem('token') ? `Bearer ${localStorage.getItem('token')}` : ''\n                }\n              });\n              console.log('直接调用服务响应:', directResponse);\n              if (Array.isArray(directResponse.data) && directResponse.data.length > 0) {\n                deliveryAddresses.value = directResponse.data;\n                console.log('通过直接调用服务获取到地址数据:', deliveryAddresses.value.length, '个地址');\n                fetchedFromServer = true;\n              }\n            } catch (directError) {\n              console.warn('直接调用服务也失败:', directError);\n            }\n          }\n        }\n\n        // 4. 如果所有服务器请求都失败，尝试从localStorage获取临时保存的地址\n        if (!fetchedFromServer || deliveryAddresses.value.length === 0) {\n          const localAddresses = JSON.parse(localStorage.getItem('userAddresses') || '[]');\n\n          // 只使用当前用户的地址\n          const userLocalAddresses = localAddresses.filter(addr => addr.userId === userId.value);\n          if (userLocalAddresses.length > 0) {\n            deliveryAddresses.value = userLocalAddresses;\n            console.log('从本地存储获取到地址数据:', deliveryAddresses.value.length, '个地址');\n          } else {\n            console.warn('本地存储中也没有找到地址数据');\n          }\n        }\n\n        // 如果没有获取到数据，显示提示\n        if (deliveryAddresses.value.length === 0) {\n          console.warn('未能从任何来源获取地址数据');\n          // 可以考虑弹出提示，或者显示添加地址的按钮\n        }\n      } catch (error) {\n        console.error('获取地址时发生错误:', error);\n        alert('获取地址数据时出错');\n      }\n    };\n    onMounted(fetchDeliveryAddresses);\n    const selectAddress = address => {\n      const isConfirmed = window.confirm('确定选择这个地址吗？');\n      if (isConfirmed) {\n        chooseAddress(address);\n      } else {\n        console.log('选择地址已取消');\n      }\n    };\n    const chooseAddress = address => {\n      localStorage.setItem('selectedAddress', JSON.stringify(address));\n\n      // 保存订单信息到 localStorage\n      const orderInfo = JSON.parse(localStorage.getItem('orderInfo') || '{}');\n      orderInfo.selectedAddress = address;\n      orderInfo.selectedDaId = address.daId; // 保存 daId\n      localStorage.setItem('orderInfo', JSON.stringify(orderInfo));\n      router.push({\n        name: 'Order',\n        params: {\n          businessId: businessId.value,\n          businessName: businessName.value\n        }\n      });\n    };\n    const confirmDeleteAddress = (address, index) => {\n      const isConfirmed = window.confirm('确定删除这个地址吗？');\n      if (isConfirmed) {\n        deleteAddress(address, index);\n      } else {\n        console.log('删除地址已取消');\n      }\n    };\n    const deleteAddress = async (address, index) => {\n      try {\n        const response = await deliveryAddressApi.deleteDeliveryAddress(address.daId);\n        if (response && response.code === 1) {\n          deliveryAddresses.value.splice(index, 1);\n          alert('地址删除成功');\n        } else {\n          alert('地址删除失败');\n        }\n      } catch (error) {\n        console.error('删除地址失败:', error);\n        alert('地址删除失败');\n      }\n    };\n    const editAddress = () => {\n      router.push({\n        name: 'Updata',\n        params: {\n          userId: userId.value\n        }\n      });\n    };\n    const __returned__ = {\n      route,\n      userId,\n      businessId,\n      businessName,\n      deliveryAddresses,\n      fetchDeliveryAddresses,\n      selectAddress,\n      chooseAddress,\n      confirmDeleteAddress,\n      deleteAddress,\n      editAddress,\n      ref,\n      onMounted,\n      get useRoute() {\n        return useRoute;\n      },\n      get deliveryAddressApi() {\n        return deliveryAddressApi;\n      },\n      get router() {\n        return router;\n      },\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","useRoute","deliveryAddressApi","router","axios","route","userId","params","businessId","businessName","deliveryAddresses","fetchDeliveryAddresses","value","console","error","log","fetchedFromServer","response","getDeliveryAddressesByUserId","Array","isArray","length","code","data","daId","standardError","warn","testResponse","testGetDeliveryAddresses","addresses","testError","directResponse","get","headers","localStorage","getItem","directError","localAddresses","JSON","parse","userLocalAddresses","filter","addr","alert","selectAddress","address","isConfirmed","window","confirm","chooseAddress","setItem","stringify","orderInfo","selectedAddress","selectedDaId","push","name","confirmDeleteAddress","index","deleteAddress","deleteDeliveryAddress","splice","editAddress"],"sources":["D:/back_elm/vue_elm/src/components/addressComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"wrapper\">\r\n    <div class=\"header\">\r\n      <h class=\"title\">选择收货地址</h>\r\n      <div class=\"img\">\r\n        <img :src=\"require('@/assets/img_5.png')\" alt=\"\">\r\n      </div>\r\n    </div>\r\n    <div>\r\n      <img :src=\"require('@/assets/img_6.png')\" style=\"width: 100%; margin-top: 10px\" alt=\"\">\r\n    </div>\r\n    <div v-if=\"deliveryAddresses.length === 0\" class=\"text_title\">\r\n      <h1>加载中...</h1>\r\n    </div>\r\n    <div v-for=\"(address, index) in deliveryAddresses\" :key=\"index\" class=\"address-item\">\r\n      <div class=\"body\">\r\n        <div class=\"tb\" @click=\"selectAddress(address)\">\r\n          <div class=\"text\">\r\n            <div class=\"text_title\">\r\n              <h1 style=\"font-size: 10px; color: #17BAF9; border: #b3d4fc 1px solid; background-color: #b3d4fc; border-radius: 20%;\">学校</h1>\r\n              <h2 style=\"font-size: 16px; margin-left: 10px; font-weight: bolder\">{{ address.address }}</h2>\r\n            </div>\r\n            <div class=\"text_body\">\r\n              <h1>姓名: {{ address.contactName }}</h1>\r\n              <h2>电话: {{ address.contactTel }}</h2>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"xg\" style=\"margin-right: 10px\">\r\n          <img :src=\"require('@/assets/img_8.png')\" style=\"width: 30px\" @click=\"confirmDeleteAddress(address, index)\">\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"footer\">\r\n      <img :src=\"require('@/assets/img_9.png')\"\r\n           style=\"width: 100%;\r\n           margin-top: 10px\" @click=\"editAddress()\">\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue';\r\nimport { useRoute } from 'vue-router';\r\nimport { deliveryAddressApi } from '@/utils/api';\r\nimport router from \"@/router\";\r\nimport axios from 'axios';\r\n\r\nconst route = useRoute();\r\nconst userId = ref(route.params.userId);\r\nconst businessId = ref(route.params.businessId);\r\nconst businessName = ref(route.params.businessName);\r\nconst deliveryAddresses = ref([]);\r\n\r\nconst fetchDeliveryAddresses = async () => {\r\n  if (!userId.value) {\r\n    console.error('用户ID未提供');\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    console.log('获取用户地址，userId:', userId.value);\r\n    \r\n    // 尝试API获取数据，先清空数组\r\n    deliveryAddresses.value = [];\r\n    \r\n    // 尝试从服务器获取地址\r\n    let fetchedFromServer = false;\r\n    \r\n    // 1. 先尝试使用标准接口\r\n    try {\r\n      console.log('尝试使用标准接口获取地址数据');\r\n      const response = await deliveryAddressApi.getDeliveryAddressesByUserId(userId.value);\r\n      console.log('标准接口响应:', response);\r\n      \r\n      // 处理响应数据\r\n      if (Array.isArray(response) && response.length > 0) {\r\n        // 响应直接是数组\r\n        deliveryAddresses.value = response;\r\n        console.log('成功获取到地址列表(直接数组):', response.length, '个地址');\r\n        fetchedFromServer = true;\r\n      } else if (response && response.code === 1 && Array.isArray(response.data) && response.data.length > 0) {\r\n        // 响应是标准Result格式，data是数组\r\n        deliveryAddresses.value = response.data;\r\n        console.log('成功获取到地址列表(Result格式):', response.data.length, '个地址');\r\n        fetchedFromServer = true;\r\n      } else if (response && typeof response === 'object' && response.daId) {\r\n        // 响应是单个地址对象\r\n        deliveryAddresses.value = [response];\r\n        console.log('成功获取到单个地址(对象)');\r\n        fetchedFromServer = true;\r\n      }\r\n    } catch (standardError) {\r\n      console.warn('标准接口请求失败:', standardError);\r\n      \r\n      // 2. 如果标准接口失败，尝试测试接口\r\n      try {\r\n        console.log('尝试使用测试接口获取地址数据');\r\n        const testResponse = await deliveryAddressApi.testGetDeliveryAddresses(userId.value);\r\n        console.log('测试接口响应:', testResponse);\r\n        \r\n        if (testResponse && testResponse.addresses && Array.isArray(testResponse.addresses) && testResponse.addresses.length > 0) {\r\n          deliveryAddresses.value = testResponse.addresses;\r\n          console.log('通过测试接口成功获取到地址数据:', deliveryAddresses.value.length, '个地址');\r\n          fetchedFromServer = true;\r\n        }\r\n      } catch (testError) {\r\n        console.warn('测试接口请求也失败:', testError);\r\n        \r\n        // 3. 尝试直接调用服务\r\n        try {\r\n          console.log('尝试直接调用地址服务');\r\n          const directResponse = await axios.get(`http://localhost:8086/deliveryAddress/listByUserId/${userId.value}`, {\r\n            headers: {\r\n              'Authorization': localStorage.getItem('token') ? `Bearer ${localStorage.getItem('token')}` : ''\r\n            }\r\n          });\r\n          console.log('直接调用服务响应:', directResponse);\r\n          \r\n          if (Array.isArray(directResponse.data) && directResponse.data.length > 0) {\r\n            deliveryAddresses.value = directResponse.data;\r\n            console.log('通过直接调用服务获取到地址数据:', deliveryAddresses.value.length, '个地址');\r\n            fetchedFromServer = true;\r\n          }\r\n        } catch (directError) {\r\n          console.warn('直接调用服务也失败:', directError);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // 4. 如果所有服务器请求都失败，尝试从localStorage获取临时保存的地址\r\n    if (!fetchedFromServer || deliveryAddresses.value.length === 0) {\r\n      const localAddresses = JSON.parse(localStorage.getItem('userAddresses') || '[]');\r\n      \r\n      // 只使用当前用户的地址\r\n      const userLocalAddresses = localAddresses.filter(addr => addr.userId === userId.value);\r\n      \r\n      if (userLocalAddresses.length > 0) {\r\n        deliveryAddresses.value = userLocalAddresses;\r\n        console.log('从本地存储获取到地址数据:', deliveryAddresses.value.length, '个地址');\r\n      } else {\r\n        console.warn('本地存储中也没有找到地址数据');\r\n      }\r\n    }\r\n    \r\n    // 如果没有获取到数据，显示提示\r\n    if (deliveryAddresses.value.length === 0) {\r\n      console.warn('未能从任何来源获取地址数据');\r\n      // 可以考虑弹出提示，或者显示添加地址的按钮\r\n    }\r\n  } catch (error) {\r\n    console.error('获取地址时发生错误:', error);\r\n    alert('获取地址数据时出错');\r\n  }\r\n};\r\n\r\nonMounted(fetchDeliveryAddresses);\r\n\r\nconst selectAddress = (address) => {\r\n  const isConfirmed = window.confirm('确定选择这个地址吗？');\r\n  if (isConfirmed) {\r\n    chooseAddress(address);\r\n  } else {\r\n    console.log('选择地址已取消');\r\n  }\r\n};\r\n\r\nconst chooseAddress = (address) => {\r\n  localStorage.setItem('selectedAddress', JSON.stringify(address));\r\n\r\n  // 保存订单信息到 localStorage\r\n  const orderInfo = JSON.parse(localStorage.getItem('orderInfo') || '{}');\r\n  orderInfo.selectedAddress = address;\r\n  orderInfo.selectedDaId = address.daId; // 保存 daId\r\n  localStorage.setItem('orderInfo', JSON.stringify(orderInfo));\r\n\r\n  router.push({\r\n    name: 'Order',\r\n    params: { businessId: businessId.value, businessName: businessName.value }\r\n  });\r\n};\r\n\r\nconst confirmDeleteAddress = (address, index) => {\r\n  const isConfirmed = window.confirm('确定删除这个地址吗？');\r\n  if (isConfirmed) {\r\n    deleteAddress(address, index);\r\n  } else {\r\n    console.log('删除地址已取消');\r\n  }\r\n};\r\n\r\nconst deleteAddress = async (address, index) => {\r\n  try {\r\n    const response = await deliveryAddressApi.deleteDeliveryAddress(address.daId);\r\n    if (response && response.code === 1) {\r\n      deliveryAddresses.value.splice(index, 1);\r\n      alert('地址删除成功');\r\n    } else {\r\n      alert('地址删除失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('删除地址失败:', error);\r\n    alert('地址删除失败');\r\n  }\r\n};\r\n\r\nconst editAddress = () => {\r\n  router.push({\r\n    name: 'Updata',\r\n    params: { userId: userId.value }\r\n  });\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.wrapper {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\n.header h {\r\n  flex-grow: 1;\r\n  text-align: center;\r\n  font-weight: bolder;\r\n}\r\n\r\n.img img {\r\n  width: 70%;\r\n}\r\n\r\n.body {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-top: 10px;\r\n  border-bottom: 1px solid #999999; /* 添加底部线条 */\r\n  padding-bottom: 10px; /* 根据需要调整间距 */\r\n}\r\n\r\n.tb {\r\n  display: flex;\r\n}\r\n\r\n.text {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.text_title {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.text_title h1 {\r\n  font-weight: normal;\r\n  margin-left: 10px;\r\n}\r\n\r\n.text_body {\r\n  display: flex;\r\n  align-items: center;\r\n  color: #999999;\r\n}\r\n\r\n.text_body h1,\r\n.text_body h2 {\r\n  font-weight: normal;\r\n  font-size: 10px;\r\n  margin-left: 10px;\r\n}\r\n\r\n.xg {\r\n  margin-right: 10px;\r\n}\r\n\r\n.xg img {\r\n  width: 30px;\r\n}\r\n\r\n.footer img {\r\n  width: 100%;\r\n}\r\n</style>\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}