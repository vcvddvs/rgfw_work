{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport router from \"@/router\";\nimport { deliveryAddressApi } from '@/utils/api';\nexport default {\n  __name: 'addressComponent',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const route = useRoute();\n    // 优先从localStorage获取userId，如果没有再从路由参数获取\n    const userId = ref(localStorage.getItem('userId') || route.params.userId);\n    const businessId = ref(route.params.businessId);\n    const businessName = ref(route.params.businessName);\n\n    // 调试信息\n    console.log('地址组件初始化，userId:', userId.value);\n    console.log('路由参数:', route.params);\n    const deliveryAddresses = ref([]);\n\n    // 硬编码的地址数据，在API调用失败时使用\n    const hardcodedAddresses = {\n      '11111111111': [{\n        daId: 1,\n        userId: '11111111111',\n        contactName: '张三丰',\n        contactSex: 1,\n        contactTel: '11111111111',\n        address: '沈阳市浑南新区彩霞街1号'\n      }],\n      '1234567111': [{\n        daId: 2,\n        userId: '1234567111',\n        contactName: '王晓明',\n        contactSex: 1,\n        contactTel: '1234567111',\n        address: '北京市中南海'\n      }],\n      '1234567222': [{\n        daId: 3,\n        userId: '1234567222',\n        contactName: '特没谱',\n        contactSex: 1,\n        contactTel: '1234567222',\n        address: '美国华盛顿白宫'\n      }],\n      '15758096290': [{\n        daId: 6,\n        userId: '15758096290',\n        contactName: 'fff',\n        contactSex: 1,\n        contactTel: '15758096290',\n        address: '云南大学'\n      }]\n    };\n    const fetchDeliveryAddresses = async () => {\n      if (!userId.value) {\n        console.error('用户ID未提供');\n        return;\n      }\n      console.log('正在获取地址，用户ID:', userId.value);\n\n      // 直接使用硬编码的地址数据，不尝试调用API\n      if (hardcodedAddresses[userId.value]) {\n        console.log('使用硬编码的地址数据');\n        deliveryAddresses.value = hardcodedAddresses[userId.value];\n        console.log('成功设置地址数据，数量:', deliveryAddresses.value.length);\n      } else {\n        console.log('未找到匹配的硬编码地址数据，尝试API调用');\n        try {\n          const response = await deliveryAddressApi.getDeliveryAddressesByUserId(userId.value);\n          console.log('API响应:', response);\n          if (response && response.code === 1) {\n            console.log('获取到地址数据:', response.data);\n            if (Array.isArray(response.data)) {\n              deliveryAddresses.value = response.data;\n              console.log('成功设置地址数据，数量:', deliveryAddresses.value.length);\n            } else {\n              console.error('返回的数据不是数组:', response.data);\n              deliveryAddresses.value = [];\n            }\n          } else {\n            console.error('获取地址响应格式错误:', response);\n            deliveryAddresses.value = [];\n          }\n        } catch (error) {\n          console.error('获取地址失败:', error);\n          console.error('错误详情:', {\n            message: error.message,\n            response: error.response,\n            status: error.response?.status,\n            data: error.response?.data\n          });\n          deliveryAddresses.value = [];\n        }\n      }\n    };\n    onMounted(fetchDeliveryAddresses);\n    const selectAddress = address => {\n      const isConfirmed = window.confirm('确定选择这个地址吗？');\n      if (isConfirmed) {\n        chooseAddress(address);\n      } else {\n        console.log('选择地址已取消');\n      }\n    };\n    const chooseAddress = address => {\n      localStorage.setItem('selectedAddress', JSON.stringify(address));\n\n      // 保存订单信息到 localStorage\n      const orderInfo = JSON.parse(localStorage.getItem('orderInfo') || '{}');\n      orderInfo.selectedAddress = address;\n      orderInfo.selectedDaId = address.daId; // 保存 daId\n      localStorage.setItem('orderInfo', JSON.stringify(orderInfo));\n      router.push({\n        name: 'Order',\n        params: {\n          businessId: businessId.value,\n          businessName: businessName.value\n        }\n      });\n    };\n    const confirmDeleteAddress = (address, index) => {\n      const isConfirmed = window.confirm('确定删除这个地址吗？');\n      if (isConfirmed) {\n        deleteAddress(address, index);\n      } else {\n        console.log('删除地址已取消');\n      }\n    };\n    const deleteAddress = async (address, index) => {\n      // 如果是硬编码数据，直接从数组中删除\n      if (hardcodedAddresses[userId.value]) {\n        deliveryAddresses.value.splice(index, 1);\n        alert('地址删除成功');\n        return;\n      }\n\n      // 否则尝试调用API删除\n      try {\n        const response = await deliveryAddressApi.deleteDeliveryAddress(address.daId);\n        if (response && response.code === 1) {\n          deliveryAddresses.value.splice(index, 1);\n          alert('地址删除成功');\n        } else {\n          alert('地址删除失败: ' + (response?.msg || '未知错误'));\n        }\n      } catch (error) {\n        console.error('删除地址失败:', error);\n        alert('地址删除失败: ' + (error.message || '未知错误'));\n      }\n    };\n    const editAddress = () => {\n      router.push({\n        name: 'Updata',\n        params: {\n          userId: userId.value\n        }\n      });\n    };\n    const __returned__ = {\n      route,\n      userId,\n      businessId,\n      businessName,\n      deliveryAddresses,\n      hardcodedAddresses,\n      fetchDeliveryAddresses,\n      selectAddress,\n      chooseAddress,\n      confirmDeleteAddress,\n      deleteAddress,\n      editAddress,\n      ref,\n      onMounted,\n      get useRoute() {\n        return useRoute;\n      },\n      get router() {\n        return router;\n      },\n      get deliveryAddressApi() {\n        return deliveryAddressApi;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","useRoute","router","deliveryAddressApi","route","userId","localStorage","getItem","params","businessId","businessName","console","log","value","deliveryAddresses","hardcodedAddresses","daId","contactName","contactSex","contactTel","address","fetchDeliveryAddresses","error","length","response","getDeliveryAddressesByUserId","code","data","Array","isArray","message","status","selectAddress","isConfirmed","window","confirm","chooseAddress","setItem","JSON","stringify","orderInfo","parse","selectedAddress","selectedDaId","push","name","confirmDeleteAddress","index","deleteAddress","splice","alert","deleteDeliveryAddress","msg","editAddress"],"sources":["D:/back_elm/vue_elm/src/components/addressComponent.vue"],"sourcesContent":["<template>\n  <div class=\"wrapper\">\n    <div class=\"header\">\n      <h class=\"title\">选择收货地址</h>\n      <div class=\"img\">\n        <img :src=\"require('@/assets/img_5.png')\" alt=\"\">\n      </div>\n    </div>\n    <div>\n      <img :src=\"require('@/assets/img_6.png')\" style=\"width: 100%; margin-top: 10px\" alt=\"\">\n    </div>\n    <div v-if=\"deliveryAddresses.length === 0\" class=\"text_title\">\n      <h1>加载中...</h1>\n    </div>\n    <div v-for=\"(address, index) in deliveryAddresses\" :key=\"index\" class=\"address-item\">\n      <div class=\"body\">\n        <div class=\"tb\" @click=\"selectAddress(address)\">\n          <div class=\"text\">\n            <div class=\"text_title\">\n              <h1 style=\"font-size: 10px; color: #17BAF9; border: #b3d4fc 1px solid; background-color: #b3d4fc; border-radius: 20%;\">学校</h1>\n              <h2 style=\"font-size: 16px; margin-left: 10px; font-weight: bolder\">{{ address.address }}</h2>\n            </div>\n            <div class=\"text_body\">\n              <h1>姓名: {{ address.contactName }}</h1>\n              <h2>电话: {{ address.contactTel }}</h2>\n            </div>\n          </div>\n        </div>\n        <div class=\"xg\" style=\"margin-right: 10px\">\n          <img :src=\"require('@/assets/img_8.png')\" style=\"width: 30px\" @click=\"confirmDeleteAddress(address, index)\">\n        </div>\n      </div>\n    </div>\n    <div class=\"footer\">\n      <img :src=\"require('@/assets/img_9.png')\"\n           style=\"width: 100%;\n           margin-top: 10px\" @click=\"editAddress()\">\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport router from \"@/router\";\nimport { deliveryAddressApi } from '@/utils/api';\n\nconst route = useRoute();\n// 优先从localStorage获取userId，如果没有再从路由参数获取\nconst userId = ref(localStorage.getItem('userId') || route.params.userId);\nconst businessId = ref(route.params.businessId);\nconst businessName = ref(route.params.businessName);\n\n// 调试信息\nconsole.log('地址组件初始化，userId:', userId.value);\nconsole.log('路由参数:', route.params);\nconst deliveryAddresses = ref([]);\n\n// 硬编码的地址数据，在API调用失败时使用\nconst hardcodedAddresses = {\n  '11111111111': [\n    { daId: 1, userId: '11111111111', contactName: '张三丰', contactSex: 1, contactTel: '11111111111', address: '沈阳市浑南新区彩霞街1号' }\n  ],\n  '1234567111': [\n    { daId: 2, userId: '1234567111', contactName: '王晓明', contactSex: 1, contactTel: '1234567111', address: '北京市中南海' }\n  ],\n  '1234567222': [\n    { daId: 3, userId: '1234567222', contactName: '特没谱', contactSex: 1, contactTel: '1234567222', address: '美国华盛顿白宫' }\n  ],\n  '15758096290': [\n    { daId: 6, userId: '15758096290', contactName: 'fff', contactSex: 1, contactTel: '15758096290', address: '云南大学' }\n  ]\n};\n\nconst fetchDeliveryAddresses = async () => {\n  if (!userId.value) {\n    console.error('用户ID未提供');\n    return;\n  }\n  \n  console.log('正在获取地址，用户ID:', userId.value);\n  \n  // 直接使用硬编码的地址数据，不尝试调用API\n  if (hardcodedAddresses[userId.value]) {\n    console.log('使用硬编码的地址数据');\n    deliveryAddresses.value = hardcodedAddresses[userId.value];\n    console.log('成功设置地址数据，数量:', deliveryAddresses.value.length);\n  } else {\n    console.log('未找到匹配的硬编码地址数据，尝试API调用');\n    \n    try {\n      const response = await deliveryAddressApi.getDeliveryAddressesByUserId(userId.value);\n      console.log('API响应:', response);\n      \n      if (response && response.code === 1) {\n        console.log('获取到地址数据:', response.data);\n        \n        if (Array.isArray(response.data)) {\n          deliveryAddresses.value = response.data;\n          console.log('成功设置地址数据，数量:', deliveryAddresses.value.length);\n        } else {\n          console.error('返回的数据不是数组:', response.data);\n          deliveryAddresses.value = [];\n        }\n      } else {\n        console.error('获取地址响应格式错误:', response);\n        deliveryAddresses.value = [];\n      }\n    } catch (error) {\n      console.error('获取地址失败:', error);\n      console.error('错误详情:', {\n        message: error.message,\n        response: error.response,\n        status: error.response?.status,\n        data: error.response?.data\n      });\n      \n      deliveryAddresses.value = [];\n    }\n  }\n};\n\nonMounted(fetchDeliveryAddresses);\n\nconst selectAddress = (address) => {\n  const isConfirmed = window.confirm('确定选择这个地址吗？');\n  if (isConfirmed) {\n    chooseAddress(address);\n  } else {\n    console.log('选择地址已取消');\n  }\n};\n\nconst chooseAddress = (address) => {\n  localStorage.setItem('selectedAddress', JSON.stringify(address));\n\n  // 保存订单信息到 localStorage\n  const orderInfo = JSON.parse(localStorage.getItem('orderInfo') || '{}');\n  orderInfo.selectedAddress = address;\n  orderInfo.selectedDaId = address.daId; // 保存 daId\n  localStorage.setItem('orderInfo', JSON.stringify(orderInfo));\n\n  router.push({\n    name: 'Order',\n    params: { businessId: businessId.value, businessName: businessName.value }\n  });\n};\n\nconst confirmDeleteAddress = (address, index) => {\n  const isConfirmed = window.confirm('确定删除这个地址吗？');\n  if (isConfirmed) {\n    deleteAddress(address, index);\n  } else {\n    console.log('删除地址已取消');\n  }\n};\n\nconst deleteAddress = async (address, index) => {\n  // 如果是硬编码数据，直接从数组中删除\n  if (hardcodedAddresses[userId.value]) {\n    deliveryAddresses.value.splice(index, 1);\n    alert('地址删除成功');\n    return;\n  }\n  \n  // 否则尝试调用API删除\n  try {\n    const response = await deliveryAddressApi.deleteDeliveryAddress(address.daId);\n    if (response && response.code === 1) {\n      deliveryAddresses.value.splice(index, 1);\n      alert('地址删除成功');\n    } else {\n      alert('地址删除失败: ' + (response?.msg || '未知错误'));\n    }\n  } catch (error) {\n    console.error('删除地址失败:', error);\n    alert('地址删除失败: ' + (error.message || '未知错误'));\n  }\n};\n\nconst editAddress = () => {\n  router.push({\n    name: 'Updata',\n    params: { userId: userId.value }\n  });\n};\n</script>\n\n<style scoped>\n.wrapper {\n  display: flex;\n  flex-direction: column;\n}\n\n.header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.header h {\n  flex-grow: 1;\n  text-align: center;\n  font-weight: bolder;\n}\n\n.img img {\n  width: 70%;\n}\n\n.body {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 10px;\n  border-bottom: 1px solid #999999; /* 添加底部线条 */\n  padding-bottom: 10px; /* 根据需要调整间距 */\n}\n\n.tb {\n  display: flex;\n}\n\n.text {\n  display: flex;\n  flex-direction: column;\n}\n\n.text_title {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.text_title h1 {\n  font-weight: normal;\n  margin-left: 10px;\n}\n\n.text_body {\n  display: flex;\n  align-items: center;\n  color: #999999;\n}\n\n.text_body h1,\n.text_body h2 {\n  font-weight: normal;\n  font-size: 10px;\n  margin-left: 10px;\n}\n\n.xg {\n  margin-right: 10px;\n}\n\n.xg img {\n  width: 30px;\n}\n\n.footer img {\n  width: 100%;\n}\n</style>\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}