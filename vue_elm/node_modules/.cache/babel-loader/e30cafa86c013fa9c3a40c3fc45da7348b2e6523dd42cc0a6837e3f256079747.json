{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted } from 'vue';\nimport axios from 'axios';\nimport { useRouter } from 'vue-router';\nimport { ElForm, ElFormItem, ElInput, ElButton, ElMessage } from 'element-plus';\n\n// 添加axios请求拦截器\n\nexport default {\n  __name: 'loginComponent',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    axios.interceptors.request.use(config => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers['Authorization'] = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n\n    // 添加axios响应拦截器\n    axios.interceptors.response.use(response => response, error => {\n      if (error.response?.status === 401) {\n        localStorage.removeItem('token');\n        localStorage.removeItem('userId');\n        router.push('/login-component');\n      }\n      return Promise.reject(error);\n    });\n    const router = useRouter();\n    const userId = ref('');\n    const password = ref('');\n    const login = async () => {\n      try {\n        if (!userId.value || !password.value) {\n          ElMessage.error('请输入账号和密码');\n          return;\n        }\n\n        // 打印请求数据\n        console.log('发送登录请求:', {\n          userId: userId.value,\n          password: password.value\n        });\n        const response = await axios({\n          method: 'post',\n          url: 'http://localhost:8080/elm_servlet_war_exploded/login',\n          data: {\n            userId: userId.value,\n            password: password.value\n          },\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        // 打印完整响应\n        console.log('收到响应:', {\n          status: response.status,\n          statusText: response.statusText,\n          headers: response.headers,\n          data: response.data\n        });\n\n        // 检查响应数据结构\n        if (response.data && typeof response.data === 'object') {\n          console.log('响应数据结构验证:', {\n            hasSuccess: 'success' in response.data,\n            hasMessage: 'message' in response.data,\n            hasData: 'data' in response.data,\n            successType: typeof response.data.success,\n            dataType: typeof response.data.data\n          });\n          if (response.data.success === true) {\n            const token = response.data.data;\n\n            // 验证token\n            if (typeof token === 'string' && token.length > 0) {\n              console.log('获取到有效token');\n\n              // 保存认证信息\n              localStorage.setItem('token', token);\n              localStorage.setItem('userId', userId.value);\n\n              // 设置axios默认header\n              axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n              ElMessage.success('登录成功');\n              router.push('/Index-Component');\n              return;\n            } else {\n              console.error('Token无效:', token);\n              ElMessage.error('登录失败：无效的认证信息');\n              return;\n            }\n          }\n        }\n\n        // 如果没有在上面返回，说明登录失败\n        console.error('登录失败，响应数据:', response.data);\n        ElMessage.error(response.data?.message || '登录失败，请检查用户名和密码');\n      } catch (error) {\n        // 详细的错误日志\n        console.error('登录异常:', {\n          name: error.name,\n          message: error.message,\n          config: error.config,\n          response: error.response ? {\n            status: error.response.status,\n            statusText: error.response.statusText,\n            data: error.response.data\n          } : 'No response',\n          stack: error.stack\n        });\n        if (error.response) {\n          switch (error.response.status) {\n            case 400:\n              ElMessage.error('请求参数错误');\n              break;\n            case 401:\n              ElMessage.error('用户名或密码错误');\n              break;\n            case 403:\n              ElMessage.error('没有访问权限');\n              break;\n            case 500:\n              ElMessage.error('服务器内部错误');\n              break;\n            default:\n              ElMessage.error(`登录失败 (${error.response.status})`);\n          }\n        } else if (error.request) {\n          ElMessage.error('无法连接到服务器，请检查网络');\n        } else {\n          ElMessage.error('登录请求失败：' + error.message);\n        }\n      }\n    };\n    const register = () => {\n      router.push('/Register-component');\n    };\n    const __returned__ = {\n      router,\n      userId,\n      password,\n      login,\n      register,\n      ref,\n      onMounted,\n      get axios() {\n        return axios;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      get ElForm() {\n        return ElForm;\n      },\n      get ElFormItem() {\n        return ElFormItem;\n      },\n      get ElInput() {\n        return ElInput;\n      },\n      get ElButton() {\n        return ElButton;\n      },\n      get ElMessage() {\n        return ElMessage;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","axios","useRouter","ElForm","ElFormItem","ElInput","ElButton","ElMessage","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","response","status","removeItem","router","push","userId","password","login","value","console","log","method","url","data","statusText","hasSuccess","hasMessage","hasData","successType","success","dataType","length","setItem","defaults","common","message","name","stack","register"],"sources":["D:/IDEA/vue_elm/vue_elm/src/components/loginComponent.vue"],"sourcesContent":["<template>\n  <el-form class=\"wrapper\" @submit.prevent=\"login\">\n    <div class=\"header\">\n      <img :src=\"require('@/assets/img_1.png')\"\n           height=\"70px\"\n           width=\"100px\" alt=\"描述\"\n      />\n      <p>欢迎使用  饿了么</p>\n    </div>\n    <h>\n      <img :src=\"require('@/assets/elm_title.gif')\"\n           height=\"100%\"\n           width=\"100%\" alt=\"描述\"\n      />\n    </h>\n    <el-form-item label=\"账户:\">\n      <el-input v-model=\"userId\" placeholder=\"账户\"></el-input>\n    </el-form-item>\n    <el-form-item label=\"密码：\">\n      <el-input type=\"password\" v-model=\"password\" placeholder=\"密码\"></el-input>\n    </el-form-item>\n    <div class=\"button-box\">\n      <el-button type=\"primary\" @click=\"login\" style=\"width: 75%;margin-left: 25px;;margin-bottom: 10px; background-color: #409EFF;\">登录</el-button>\n    </div>\n    <div class=\"button-box\">\n      <el-button @click=\"register\" style=\"width: 75%;margin-left: 25px\">注册</el-button>\n    </div>\n\n  </el-form>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport axios from 'axios';\nimport { useRouter } from 'vue-router';\nimport { ElForm, ElFormItem, ElInput, ElButton, ElMessage } from 'element-plus';\n\n// 添加axios请求拦截器\naxios.interceptors.request.use(\n  config => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  error => {\n    return Promise.reject(error);\n  }\n);\n\n// 添加axios响应拦截器\naxios.interceptors.response.use(\n  response => response,\n  error => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('userId');\n      router.push('/login-component');\n    }\n    return Promise.reject(error);\n  }\n);\n\nconst router = useRouter();\nconst userId = ref('');\nconst password = ref('');\n\nconst login = async () => {\n  try {\n    if (!userId.value || !password.value) {\n      ElMessage.error('请输入账号和密码');\n      return;\n    }\n\n    // 打印请求数据\n    console.log('发送登录请求:', {\n      userId: userId.value,\n      password: password.value\n    });\n\n    const response = await axios({\n      method: 'post',\n      url: 'http://localhost:8080/elm_servlet_war_exploded/login',\n      data: {\n        userId: userId.value,\n        password: password.value\n      },\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // 打印完整响应\n    console.log('收到响应:', {\n      status: response.status,\n      statusText: response.statusText,\n      headers: response.headers,\n      data: response.data\n    });\n\n    // 检查响应数据结构\n    if (response.data && typeof response.data === 'object') {\n      console.log('响应数据结构验证:', {\n        hasSuccess: 'success' in response.data,\n        hasMessage: 'message' in response.data,\n        hasData: 'data' in response.data,\n        successType: typeof response.data.success,\n        dataType: typeof response.data.data\n      });\n\n      if (response.data.success === true) {\n        const token = response.data.data;\n        \n        // 验证token\n        if (typeof token === 'string' && token.length > 0) {\n          console.log('获取到有效token');\n          \n          // 保存认证信息\n          localStorage.setItem('token', token);\n          localStorage.setItem('userId', userId.value);\n          \n          // 设置axios默认header\n          axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n          \n          ElMessage.success('登录成功');\n          router.push('/Index-Component');\n          return;\n        } else {\n          console.error('Token无效:', token);\n          ElMessage.error('登录失败：无效的认证信息');\n          return;\n        }\n      }\n    }\n\n    // 如果没有在上面返回，说明登录失败\n    console.error('登录失败，响应数据:', response.data);\n    ElMessage.error(response.data?.message || '登录失败，请检查用户名和密码');\n\n  } catch (error) {\n    // 详细的错误日志\n    console.error('登录异常:', {\n      name: error.name,\n      message: error.message,\n      config: error.config,\n      response: error.response ? {\n        status: error.response.status,\n        statusText: error.response.statusText,\n        data: error.response.data\n      } : 'No response',\n      stack: error.stack\n    });\n\n    if (error.response) {\n      switch (error.response.status) {\n        case 400:\n          ElMessage.error('请求参数错误');\n          break;\n        case 401:\n          ElMessage.error('用户名或密码错误');\n          break;\n        case 403:\n          ElMessage.error('没有访问权限');\n          break;\n        case 500:\n          ElMessage.error('服务器内部错误');\n          break;\n        default:\n          ElMessage.error(`登录失败 (${error.response.status})`);\n      }\n    } else if (error.request) {\n      ElMessage.error('无法连接到服务器，请检查网络');\n    } else {\n      ElMessage.error('登录请求失败：' + error.message);\n    }\n  }\n};\n\nconst register = () => {\n  router.push('/Register-component');\n};\n\n</script>\n\n<style scoped>\n.wrapper {\n  width: 100%;\n  height: 100%;\n}\n\n/*顶部样式*/\n.button-box button:hover {\n  color: #17BAF9; /* 鼠标悬停时的背景色 */\n}\n\n.button-box button:active {\n  background-color: #288b52; /* 鼠标点击时的背景色 */\n}\n\n/*logo样式*/\n.wrapper .header {\n  width: 100%;\n  display: flex;\n  color: white;\n  align-items: center;\n  margin-left: 30px;\n\n\n}\n\n.wrapper .header p {\n  font-size: 5vw;\n  font-weight: bolder;\n  color: #17BAF9;\n}\n\n/*主体部分*/\n.wrapper .body .logins div {\n  display: flex;\n  box-sizing: border-box;\n  padding: 4vw 3vw 0 3vw;\n  align-items: center;\n}\n\n/* 定义输入框的基本样式 */\n.el-input__inner {\n  border: none; /* 移除输入框的边框 */\n  border-bottom: 2px solid #dcdfe6; /* 设置底部边框 */\n  border-radius: 0; /* 移除圆角 */\n  transition: border-color 0.3s; /* 平滑过渡效果 */\n}\n\n/* 定义输入框的 hover 状态 */\n.el-input__inner:hover {\n  border-color: #409EFF; /* 鼠标悬停时的边框颜色 */\n}\n\n/* 定义输入框的 focus 状态 */\n.el-input__inner:focus {\n  border-color: #409EFF; /* 输入框聚焦时的边框颜色 */\n  box-shadow: 0 0 5px rgba(64, 158, 255, 0.5); /* 添加阴影效果 */\n}\n\n.wrapper .body .logins div .content input {\n  border: none;\n  outline: none;\n  height: 6vw;\n  background-color: white;\n}\n\n.wrapper .body .button-box button {\n  font-size: 5vw;\n  width: 100%;\n  font-weight: 700;\n  color: white;\n  background-color: #38ca73;\n  border: none;\n  border-radius: 15px;\n  height: 10vw;\n}\n\n\n</style>\n"],"mappings":";AAgCA,SAASA,GAAG,EAAEC,SAAS,QAAQ,KAAK;AACpC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,YAAY;AACtC,SAASC,MAAM,EAAEC,UAAU,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,cAAc;;AAE/E;;;;;;;;IACAN,KAAK,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CAC5BC,MAAM,IAAI;MACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAIF,KAAK,EAAE;QACTD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;MACrD;MACA,OAAOD,MAAM;IACf,CAAC,EACDK,KAAK,IAAI;MACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;IAC9B,CACF,CAAC;;IAED;IACAf,KAAK,CAACO,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC7BS,QAAQ,IAAIA,QAAQ,EACpBH,KAAK,IAAI;MACP,IAAIA,KAAK,CAACG,QAAQ,EAAEC,MAAM,KAAK,GAAG,EAAE;QAClCP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;QAChCR,YAAY,CAACQ,UAAU,CAAC,QAAQ,CAAC;QACjCC,MAAM,CAACC,IAAI,CAAC,kBAAkB,CAAC;MACjC;MACA,OAAON,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;IAC9B,CACF,CAAC;IAED,MAAMM,MAAM,GAAGpB,SAAS,CAAC,CAAC;IAC1B,MAAMsB,MAAM,GAAGzB,GAAG,CAAC,EAAE,CAAC;IACtB,MAAM0B,QAAQ,GAAG1B,GAAG,CAAC,EAAE,CAAC;IAExB,MAAM2B,KAAK,GAAG,MAAAA,CAAA,KAAY;MACxB,IAAI;QACF,IAAI,CAACF,MAAM,CAACG,KAAK,IAAI,CAACF,QAAQ,CAACE,KAAK,EAAE;UACpCpB,SAAS,CAACS,KAAK,CAAC,UAAU,CAAC;UAC3B;QACF;;QAEA;QACAY,OAAO,CAACC,GAAG,CAAC,SAAS,EAAE;UACrBL,MAAM,EAAEA,MAAM,CAACG,KAAK;UACpBF,QAAQ,EAAEA,QAAQ,CAACE;QACrB,CAAC,CAAC;QAEF,MAAMR,QAAQ,GAAG,MAAMlB,KAAK,CAAC;UAC3B6B,MAAM,EAAE,MAAM;UACdC,GAAG,EAAE,sDAAsD;UAC3DC,IAAI,EAAE;YACJR,MAAM,EAAEA,MAAM,CAACG,KAAK;YACpBF,QAAQ,EAAEA,QAAQ,CAACE;UACrB,CAAC;UACDZ,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CAAC,CAAC;;QAEF;QACAa,OAAO,CAACC,GAAG,CAAC,OAAO,EAAE;UACnBT,MAAM,EAAED,QAAQ,CAACC,MAAM;UACvBa,UAAU,EAAEd,QAAQ,CAACc,UAAU;UAC/BlB,OAAO,EAAEI,QAAQ,CAACJ,OAAO;UACzBiB,IAAI,EAAEb,QAAQ,CAACa;QACjB,CAAC,CAAC;;QAEF;QACA,IAAIb,QAAQ,CAACa,IAAI,IAAI,OAAOb,QAAQ,CAACa,IAAI,KAAK,QAAQ,EAAE;UACtDJ,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE;YACvBK,UAAU,EAAE,SAAS,IAAIf,QAAQ,CAACa,IAAI;YACtCG,UAAU,EAAE,SAAS,IAAIhB,QAAQ,CAACa,IAAI;YACtCI,OAAO,EAAE,MAAM,IAAIjB,QAAQ,CAACa,IAAI;YAChCK,WAAW,EAAE,OAAOlB,QAAQ,CAACa,IAAI,CAACM,OAAO;YACzCC,QAAQ,EAAE,OAAOpB,QAAQ,CAACa,IAAI,CAACA;UACjC,CAAC,CAAC;UAEF,IAAIb,QAAQ,CAACa,IAAI,CAACM,OAAO,KAAK,IAAI,EAAE;YAClC,MAAM1B,KAAK,GAAGO,QAAQ,CAACa,IAAI,CAACA,IAAI;;YAEhC;YACA,IAAI,OAAOpB,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAAC4B,MAAM,GAAG,CAAC,EAAE;cACjDZ,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;;cAEzB;cACAhB,YAAY,CAAC4B,OAAO,CAAC,OAAO,EAAE7B,KAAK,CAAC;cACpCC,YAAY,CAAC4B,OAAO,CAAC,QAAQ,EAAEjB,MAAM,CAACG,KAAK,CAAC;;cAE5C;cACA1B,KAAK,CAACyC,QAAQ,CAAC3B,OAAO,CAAC4B,MAAM,CAAC,eAAe,CAAC,GAAG,UAAU/B,KAAK,EAAE;cAElEL,SAAS,CAAC+B,OAAO,CAAC,MAAM,CAAC;cACzBhB,MAAM,CAACC,IAAI,CAAC,kBAAkB,CAAC;cAC/B;YACF,CAAC,MAAM;cACLK,OAAO,CAACZ,KAAK,CAAC,UAAU,EAAEJ,KAAK,CAAC;cAChCL,SAAS,CAACS,KAAK,CAAC,cAAc,CAAC;cAC/B;YACF;UACF;QACF;;QAEA;QACAY,OAAO,CAACZ,KAAK,CAAC,YAAY,EAAEG,QAAQ,CAACa,IAAI,CAAC;QAC1CzB,SAAS,CAACS,KAAK,CAACG,QAAQ,CAACa,IAAI,EAAEY,OAAO,IAAI,gBAAgB,CAAC;MAE7D,CAAC,CAAC,OAAO5B,KAAK,EAAE;QACd;QACAY,OAAO,CAACZ,KAAK,CAAC,OAAO,EAAE;UACrB6B,IAAI,EAAE7B,KAAK,CAAC6B,IAAI;UAChBD,OAAO,EAAE5B,KAAK,CAAC4B,OAAO;UACtBjC,MAAM,EAAEK,KAAK,CAACL,MAAM;UACpBQ,QAAQ,EAAEH,KAAK,CAACG,QAAQ,GAAG;YACzBC,MAAM,EAAEJ,KAAK,CAACG,QAAQ,CAACC,MAAM;YAC7Ba,UAAU,EAAEjB,KAAK,CAACG,QAAQ,CAACc,UAAU;YACrCD,IAAI,EAAEhB,KAAK,CAACG,QAAQ,CAACa;UACvB,CAAC,GAAG,aAAa;UACjBc,KAAK,EAAE9B,KAAK,CAAC8B;QACf,CAAC,CAAC;QAEF,IAAI9B,KAAK,CAACG,QAAQ,EAAE;UAClB,QAAQH,KAAK,CAACG,QAAQ,CAACC,MAAM;YAC3B,KAAK,GAAG;cACNb,SAAS,CAACS,KAAK,CAAC,QAAQ,CAAC;cACzB;YACF,KAAK,GAAG;cACNT,SAAS,CAACS,KAAK,CAAC,UAAU,CAAC;cAC3B;YACF,KAAK,GAAG;cACNT,SAAS,CAACS,KAAK,CAAC,QAAQ,CAAC;cACzB;YACF,KAAK,GAAG;cACNT,SAAS,CAACS,KAAK,CAAC,SAAS,CAAC;cAC1B;YACF;cACET,SAAS,CAACS,KAAK,CAAC,SAASA,KAAK,CAACG,QAAQ,CAACC,MAAM,GAAG,CAAC;UACtD;QACF,CAAC,MAAM,IAAIJ,KAAK,CAACP,OAAO,EAAE;UACxBF,SAAS,CAACS,KAAK,CAAC,gBAAgB,CAAC;QACnC,CAAC,MAAM;UACLT,SAAS,CAACS,KAAK,CAAC,SAAS,GAAGA,KAAK,CAAC4B,OAAO,CAAC;QAC5C;MACF;IACF,CAAC;IAED,MAAMG,QAAQ,GAAGA,CAAA,KAAM;MACrBzB,MAAM,CAACC,IAAI,CAAC,qBAAqB,CAAC;IACpC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}