{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport router from \"@/router\";\nimport { deliveryAddressApi } from '@/utils/api';\nexport default {\n  __name: 'addressComponent',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const route = useRoute();\n    // 优先从localStorage获取userId，如果没有再从路由参数获取\n    const userId = ref(localStorage.getItem('userId') || route.params.userId);\n    const businessId = ref(route.params.businessId);\n    const businessName = ref(route.params.businessName);\n    const manualUserId = ref(''); // 用于手动输入测试\n\n    // 调试信息\n    console.log('地址组件初始化，userId:', userId.value);\n    console.log('路由参数:', route.params);\n    const deliveryAddresses = ref([]);\n    const fetchDeliveryAddresses = async () => {\n      if (!userId.value) {\n        console.error('用户ID未提供');\n        return;\n      }\n\n      // 添加调试信息\n      console.log('正在获取地址，用户ID:', userId.value);\n      try {\n        // 直接使用axios测试API\n        console.log('尝试直接调用API: /deliveryAddress/listByUserId/' + userId.value);\n\n        // 方法1: 使用api.js中定义的方法\n        const response = await deliveryAddressApi.getDeliveryAddressesByUserId(userId.value);\n        console.log('API响应:', response);\n\n        // 方法2: 直接使用axios (用于调试)\n        // const directResponse = await axios.get(`http://localhost:8090/deliveryAddress/listByUserId/${userId.value}`);\n        // console.log('直接axios响应:', directResponse);\n\n        // 检查响应格式\n        if (response && response.code === 1) {\n          console.log('获取到地址数据:', response.data);\n          deliveryAddresses.value = response.data;\n\n          // 添加一个测试地址，验证前端渲染是否正常\n          if (deliveryAddresses.value.length === 0) {\n            console.log('未获取到地址数据，添加测试地址');\n\n            // 查看数据库中的地址信息与前端请求的userId是否匹配\n            console.log('数据库中的地址(从截图看):', [{\n              daId: 1,\n              userId: '1111111111',\n              address: '沈阳市浑南新区彩霞街1号'\n            }, {\n              daId: 2,\n              userId: '1234567111',\n              address: '北京市中南海'\n            }, {\n              daId: 3,\n              userId: '1234567222',\n              address: '美国华盛顿白宫'\n            }, {\n              daId: 6,\n              userId: '15758096290',\n              address: '云南大学'\n            }]);\n            console.log('前端请求的userId:', userId.value);\n            console.log('userId类型:', typeof userId.value);\n\n            // 添加测试地址\n            deliveryAddresses.value = [{\n              daId: 999,\n              contactName: '测试用户',\n              contactSex: 1,\n              contactTel: '13800138000',\n              address: '测试地址 - 请检查控制台日志',\n              userId: userId.value\n            }];\n          }\n        } else {\n          console.error('获取地址响应格式错误:', response);\n          deliveryAddresses.value = [];\n        }\n      } catch (error) {\n        console.error('获取地址失败:', error);\n        console.error('错误详情:', {\n          message: error.message,\n          response: error.response,\n          status: error.response?.status,\n          data: error.response?.data\n        });\n\n        // 添加一个测试地址，验证前端渲染是否正常\n        console.log('发生错误，添加测试地址');\n        deliveryAddresses.value = [{\n          daId: 999,\n          contactName: '测试用户',\n          contactSex: 1,\n          contactTel: '13800138000',\n          address: '测试地址 (错误情况)',\n          userId: userId.value\n        }];\n      }\n    };\n    onMounted(fetchDeliveryAddresses);\n    const selectAddress = address => {\n      const isConfirmed = window.confirm('确定选择这个地址吗？');\n      if (isConfirmed) {\n        chooseAddress(address);\n      } else {\n        console.log('选择地址已取消');\n      }\n    };\n    const chooseAddress = address => {\n      localStorage.setItem('selectedAddress', JSON.stringify(address));\n\n      // 保存订单信息到 localStorage\n      const orderInfo = JSON.parse(localStorage.getItem('orderInfo') || '{}');\n      orderInfo.selectedAddress = address;\n      orderInfo.selectedDaId = address.daId; // 保存 daId\n      localStorage.setItem('orderInfo', JSON.stringify(orderInfo));\n      router.push({\n        name: 'Order',\n        params: {\n          businessId: businessId.value,\n          businessName: businessName.value\n        }\n      });\n    };\n    const confirmDeleteAddress = (address, index) => {\n      const isConfirmed = window.confirm('确定删除这个地址吗？');\n      if (isConfirmed) {\n        deleteAddress(address, index);\n      } else {\n        console.log('删除地址已取消');\n      }\n    };\n    const deleteAddress = async (address, index) => {\n      try {\n        const response = await deliveryAddressApi.deleteDeliveryAddress(address.daId);\n        if (response && response.code === 1) {\n          deliveryAddresses.value.splice(index, 1);\n          alert('地址删除成功');\n        } else {\n          alert('地址删除失败: ' + (response?.msg || '未知错误'));\n        }\n      } catch (error) {\n        console.error('删除地址失败:', error);\n        alert('地址删除失败: ' + (error.message || '未知错误'));\n      }\n    };\n    const editAddress = () => {\n      router.push({\n        name: 'Updata',\n        params: {\n          userId: userId.value\n        }\n      });\n    };\n    const __returned__ = {\n      route,\n      userId,\n      businessId,\n      businessName,\n      manualUserId,\n      deliveryAddresses,\n      fetchDeliveryAddresses,\n      selectAddress,\n      chooseAddress,\n      confirmDeleteAddress,\n      deleteAddress,\n      editAddress,\n      ref,\n      onMounted,\n      get useRoute() {\n        return useRoute;\n      },\n      get router() {\n        return router;\n      },\n      get deliveryAddressApi() {\n        return deliveryAddressApi;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","useRoute","router","deliveryAddressApi","route","userId","localStorage","getItem","params","businessId","businessName","manualUserId","console","log","value","deliveryAddresses","fetchDeliveryAddresses","error","response","getDeliveryAddressesByUserId","code","data","length","daId","address","contactName","contactSex","contactTel","message","status","selectAddress","isConfirmed","window","confirm","chooseAddress","setItem","JSON","stringify","orderInfo","parse","selectedAddress","selectedDaId","push","name","confirmDeleteAddress","index","deleteAddress","deleteDeliveryAddress","splice","alert","msg","editAddress"],"sources":["D:/back_elm/vue_elm/src/components/addressComponent.vue"],"sourcesContent":["\r\n<template>\r\n  <div class=\"wrapper\">\r\n    <div class=\"header\">\r\n      <h class=\"title\">选择收货地址</h>\r\n      <div class=\"img\">\r\n        <img :src=\"require('@/assets/img_5.png')\" alt=\"\">\r\n      </div>\r\n    </div>\r\n    <div>\r\n      <img :src=\"require('@/assets/img_6.png')\" style=\"width: 100%; margin-top: 10px\" alt=\"\">\r\n    </div>\r\n    <div v-if=\"deliveryAddresses.length === 0\" class=\"text_title\">\r\n      <h1>加载中...</h1>\r\n      <div style=\"margin-top: 20px; text-align: center;\">\r\n        <p>尝试手动输入用户ID进行测试:</p>\r\n        <input v-model=\"manualUserId\" placeholder=\"输入用户ID\" style=\"margin: 10px; padding: 5px;\" />\r\n        <button @click=\"testWithManualUserId\" style=\"padding: 5px 10px; background-color: #f00; color: white; border: none; border-radius: 5px;\">测试</button>\r\n      </div>\r\n    </div>\r\n    <div v-for=\"(address, index) in deliveryAddresses\" :key=\"index\" class=\"address-item\">\r\n      <div class=\"body\">\r\n        <div class=\"tb\" @click=\"selectAddress(address)\">\r\n          <div class=\"text\">\r\n            <div class=\"text_title\">\r\n              <h1 style=\"font-size: 10px; color: #17BAF9; border: #b3d4fc 1px solid; background-color: #b3d4fc; border-radius: 20%;\">学校</h1>\r\n              <h2 style=\"font-size: 16px; margin-left: 10px; font-weight: bolder\">{{ address.address }}</h2>\r\n            </div>\r\n            <div class=\"text_body\">\r\n              <h1>姓名: {{ address.contactName }}</h1>\r\n              <h2>电话: {{ address.contactTel }}</h2>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"xg\" style=\"margin-right: 10px\">\r\n          <img :src=\"require('@/assets/img_8.png')\" style=\"width: 30px\" @click=\"confirmDeleteAddress(address, index)\">\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"footer\">\r\n      <img :src=\"require('@/assets/img_9.png')\"\r\n           style=\"width: 100%;\r\n           margin-top: 10px\" @click=\"editAddress()\">\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue';\r\nimport { useRoute } from 'vue-router';\r\nimport router from \"@/router\";\r\nimport { deliveryAddressApi } from '@/utils/api';\r\n\r\nconst route = useRoute();\r\n// 优先从localStorage获取userId，如果没有再从路由参数获取\r\nconst userId = ref(localStorage.getItem('userId') || route.params.userId);\r\nconst businessId = ref(route.params.businessId);\r\nconst businessName = ref(route.params.businessName);\r\nconst manualUserId = ref(''); // 用于手动输入测试\r\n\r\n// 调试信息\r\nconsole.log('地址组件初始化，userId:', userId.value);\r\nconsole.log('路由参数:', route.params);\r\nconst deliveryAddresses = ref([]);\r\n\r\nconst fetchDeliveryAddresses = async () => {\r\n  if (!userId.value) {\r\n    console.error('用户ID未提供');\r\n    return;\r\n  }\r\n  \r\n  // 添加调试信息\r\n  console.log('正在获取地址，用户ID:', userId.value);\r\n  \r\n  try {\r\n    // 直接使用axios测试API\r\n    console.log('尝试直接调用API: /deliveryAddress/listByUserId/' + userId.value);\r\n    \r\n    // 方法1: 使用api.js中定义的方法\r\n    const response = await deliveryAddressApi.getDeliveryAddressesByUserId(userId.value);\r\n    console.log('API响应:', response);\r\n    \r\n    // 方法2: 直接使用axios (用于调试)\r\n    // const directResponse = await axios.get(`http://localhost:8090/deliveryAddress/listByUserId/${userId.value}`);\r\n    // console.log('直接axios响应:', directResponse);\r\n    \r\n    // 检查响应格式\r\n    if (response && response.code === 1) {\r\n      console.log('获取到地址数据:', response.data);\r\n      deliveryAddresses.value = response.data;\r\n      \r\n      // 添加一个测试地址，验证前端渲染是否正常\r\n      if (deliveryAddresses.value.length === 0) {\r\n        console.log('未获取到地址数据，添加测试地址');\r\n        \r\n        // 查看数据库中的地址信息与前端请求的userId是否匹配\r\n        console.log('数据库中的地址(从截图看):', [\r\n          { daId: 1, userId: '1111111111', address: '沈阳市浑南新区彩霞街1号' },\r\n          { daId: 2, userId: '1234567111', address: '北京市中南海' },\r\n          { daId: 3, userId: '1234567222', address: '美国华盛顿白宫' },\r\n          { daId: 6, userId: '15758096290', address: '云南大学' }\r\n        ]);\r\n        console.log('前端请求的userId:', userId.value);\r\n        console.log('userId类型:', typeof userId.value);\r\n        \r\n        // 添加测试地址\r\n        deliveryAddresses.value = [{\r\n          daId: 999,\r\n          contactName: '测试用户',\r\n          contactSex: 1,\r\n          contactTel: '13800138000',\r\n          address: '测试地址 - 请检查控制台日志',\r\n          userId: userId.value\r\n        }];\r\n      }\r\n    } else {\r\n      console.error('获取地址响应格式错误:', response);\r\n      deliveryAddresses.value = [];\r\n    }\r\n  } catch (error) {\r\n    console.error('获取地址失败:', error);\r\n    console.error('错误详情:', {\r\n      message: error.message,\r\n      response: error.response,\r\n      status: error.response?.status,\r\n      data: error.response?.data\r\n    });\r\n    \r\n    // 添加一个测试地址，验证前端渲染是否正常\r\n    console.log('发生错误，添加测试地址');\r\n    deliveryAddresses.value = [{\r\n      daId: 999,\r\n      contactName: '测试用户',\r\n      contactSex: 1,\r\n      contactTel: '13800138000',\r\n      address: '测试地址 (错误情况)',\r\n      userId: userId.value\r\n    }];\r\n  }\r\n};\r\n\r\nonMounted(fetchDeliveryAddresses);\r\n\r\nconst selectAddress = (address) => {\r\n  const isConfirmed = window.confirm('确定选择这个地址吗？');\r\n  if (isConfirmed) {\r\n    chooseAddress(address);\r\n  } else {\r\n    console.log('选择地址已取消');\r\n  }\r\n};\r\n\r\nconst chooseAddress = (address) => {\r\n  localStorage.setItem('selectedAddress', JSON.stringify(address));\r\n\r\n  // 保存订单信息到 localStorage\r\n  const orderInfo = JSON.parse(localStorage.getItem('orderInfo') || '{}');\r\n  orderInfo.selectedAddress = address;\r\n  orderInfo.selectedDaId = address.daId; // 保存 daId\r\n  localStorage.setItem('orderInfo', JSON.stringify(orderInfo));\r\n\r\n  router.push({\r\n    name: 'Order',\r\n    params: { businessId: businessId.value, businessName: businessName.value }\r\n  });\r\n};\r\n\r\nconst confirmDeleteAddress = (address, index) => {\r\n  const isConfirmed = window.confirm('确定删除这个地址吗？');\r\n  if (isConfirmed) {\r\n    deleteAddress(address, index);\r\n  } else {\r\n    console.log('删除地址已取消');\r\n  }\r\n};\r\n\r\nconst deleteAddress = async (address, index) => {\r\n  try {\r\n    const response = await deliveryAddressApi.deleteDeliveryAddress(address.daId);\r\n    if (response && response.code === 1) {\r\n      deliveryAddresses.value.splice(index, 1);\r\n      alert('地址删除成功');\r\n    } else {\r\n      alert('地址删除失败: ' + (response?.msg || '未知错误'));\r\n    }\r\n  } catch (error) {\r\n    console.error('删除地址失败:', error);\r\n    alert('地址删除失败: ' + (error.message || '未知错误'));\r\n  }\r\n};\r\n\r\nconst editAddress = () => {\r\n  router.push({\r\n    name: 'Updata',\r\n    params: { userId: userId.value }\r\n  });\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.wrapper {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\n.header h {\r\n  flex-grow: 1;\r\n  text-align: center;\r\n  font-weight: bolder;\r\n}\r\n\r\n.img img {\r\n  width: 70%;\r\n}\r\n\r\n.body {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-top: 10px;\r\n  border-bottom: 1px solid #999999; /* 添加底部线条 */\r\n  padding-bottom: 10px; /* 根据需要调整间距 */\r\n}\r\n\r\n.tb {\r\n  display: flex;\r\n}\r\n\r\n.text {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.text_title {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.text_title h1 {\r\n  font-weight: normal;\r\n  margin-left: 10px;\r\n}\r\n\r\n.text_body {\r\n  display: flex;\r\n  align-items: center;\r\n  color: #999999;\r\n}\r\n\r\n.text_body h1,\r\n.text_body h2 {\r\n  font-weight: normal;\r\n  font-size: 10px;\r\n  margin-left: 10px;\r\n}\r\n\r\n.xg {\r\n  margin-right: 10px;\r\n}\r\n\r\n.xg img {\r\n  width: 30px;\r\n}\r\n\r\n.footer img {\r\n  width: 100%;\r\n}\r\n</style>\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}