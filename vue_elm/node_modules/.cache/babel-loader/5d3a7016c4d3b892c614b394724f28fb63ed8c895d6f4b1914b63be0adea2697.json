{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, computed, onMounted } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { paymentApi } from '@/utils/api';\nexport default {\n  __name: 'paymentComponent',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const route = useRoute();\n    const router = useRouter();\n    const businessName = ref(route.query.businessName || '未知店铺');\n    const orderId = ref(route.query.orderId || null);\n    const isNetworkError = ref(route.query.isNetworkError === 'true');\n\n    // 支付状态：pending-待支付, processing-处理中, success-成功, failed-失败\n    const paymentStatus = ref('pending');\n    const errorMessage = ref('');\n    const paymentId = ref(null);\n\n    // 使用computed保证响应性，并且确保totalPrice是数字类型\n    const totalPrice = computed(() => {\n      return route.query.totalAmount ? parseFloat(route.query.totalAmount) : 0;\n    });\n    const selectedMethod = ref('支付宝'); // 默认选中支付宝\n\n    function selectPaymentMethod(method) {\n      selectedMethod.value = method;\n    }\n    async function confirmPayment() {\n      if (!selectedMethod.value) {\n        alert('请选择支付方式');\n        return;\n      }\n      if (!orderId.value) {\n        alert('订单信息不完整，无法完成支付');\n        return;\n      }\n      try {\n        paymentStatus.value = 'processing';\n\n        // 构建支付请求数据\n        const paymentData = {\n          orderId: parseInt(orderId.value),\n          paymentMethod: selectedMethod.value\n        };\n        console.log('发送支付请求:', paymentData);\n\n        // 调用支付处理API\n        const response = await paymentApi.processPayment(paymentData);\n        console.log('支付响应:', response);\n        if (response && (response.code === 1 || response.success)) {\n          // 支付处理成功\n          if (response.data) {\n            paymentId.value = response.data.paymentId;\n          }\n\n          // 模拟支付验证过程\n          setTimeout(async () => {\n            try {\n              // 如果有支付ID，验证支付状态\n              if (paymentId.value) {\n                const verifyResponse = await paymentApi.verifyPayment(paymentId.value);\n                console.log('支付验证响应:', verifyResponse);\n                if (verifyResponse && verifyResponse.code === 1 && verifyResponse.data && verifyResponse.data.verified) {\n                  paymentSuccess();\n                } else {\n                  paymentFailed('支付验证失败');\n                }\n              } else {\n                // 如果没有支付ID，也当作成功处理（演示目的）\n                paymentSuccess();\n              }\n            } catch (verifyError) {\n              console.error('支付验证错误:', verifyError);\n              // 在演示环境中，仍然当作成功处理\n              paymentSuccess();\n            }\n          }, 2000); // 2秒后验证\n        } else {\n          paymentFailed(response?.msg || '支付处理失败');\n        }\n      } catch (error) {\n        console.error('支付请求错误:', error);\n\n        // 演示环境下，仍然模拟支付成功\n        setTimeout(() => {\n          paymentSuccess();\n        }, 2000);\n      }\n    }\n    function paymentSuccess() {\n      paymentStatus.value = 'success';\n      // 保存支付成功信息到localStorage\n      localStorage.setItem('lastPaymentSuccess', 'true');\n      localStorage.setItem('lastPaidOrderId', orderId.value);\n    }\n    function paymentFailed(message) {\n      paymentStatus.value = 'failed';\n      errorMessage.value = message || '支付过程中发生错误';\n    }\n    function retryPayment() {\n      paymentStatus.value = 'pending';\n      errorMessage.value = '';\n    }\n    function viewOrder() {\n      router.push({\n        name: 'OrderDetail',\n        params: {\n          orderId: orderId.value\n        }\n      });\n    }\n    function goBack() {\n      router.push({\n        name: 'Home'\n      });\n    }\n    onMounted(() => {\n      // 如果是从订单页面跳转过来的网络错误情况，我们仍然允许支付\n      if (isNetworkError.value) {\n        console.log('检测到网络错误标记，但仍然允许支付');\n      }\n\n      // 如果没有订单ID，尝试从localStorage获取\n      if (!orderId.value) {\n        orderId.value = localStorage.getItem('currentOrderId');\n        console.log('从localStorage获取订单ID:', orderId.value);\n      }\n    });\n    const __returned__ = {\n      route,\n      router,\n      businessName,\n      orderId,\n      isNetworkError,\n      paymentStatus,\n      errorMessage,\n      paymentId,\n      totalPrice,\n      selectedMethod,\n      selectPaymentMethod,\n      confirmPayment,\n      paymentSuccess,\n      paymentFailed,\n      retryPayment,\n      viewOrder,\n      goBack,\n      ref,\n      computed,\n      onMounted,\n      get useRoute() {\n        return useRoute;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      get paymentApi() {\n        return paymentApi;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","useRoute","useRouter","paymentApi","route","router","businessName","query","orderId","isNetworkError","paymentStatus","errorMessage","paymentId","totalPrice","totalAmount","parseFloat","selectedMethod","selectPaymentMethod","method","value","confirmPayment","alert","paymentData","parseInt","paymentMethod","console","log","response","processPayment","code","success","data","setTimeout","verifyResponse","verifyPayment","verified","paymentSuccess","paymentFailed","verifyError","error","msg","localStorage","setItem","message","retryPayment","viewOrder","push","name","params","goBack","getItem"],"sources":["D:/back_elm/vue_elm/src/components/paymentComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"wrapper\">\r\n    <div class=\"header\">\r\n      <div class=\"title\">\r\n        <div class=\"p1\">\r\n          <span class=\"iconfont icon-back\" style=\"font-size: 8vw\" @click=\"goBack\"></span>\r\n        </div>\r\n        <div class=\"p2\">\r\n          <p>在线支付</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <h3>订单信息</h3>\r\n    <div class=\"orders-info\">\r\n      <p>{{ businessName }}</p>\r\n      <p>¥{{ totalPrice.toFixed(2) }}</p>\r\n    </div>\r\n    \r\n    <div v-if=\"paymentStatus === 'pending'\" class=\"payment-section\">\r\n      <ul class=\"payment-type\">\r\n        <li @click=\"selectPaymentMethod('支付宝')\">\r\n          <img :src=\"require('@/assets/img/alipay.png')\" height=\"32\" width=\"120\"/>\r\n          <i v-if=\"selectedMethod === '支付宝'\" class=\"fa fa-check-circle\">✓</i>\r\n        </li>\r\n        <li @click=\"selectPaymentMethod('微信支付')\">\r\n          <img :src=\"require('@/assets/img/wechat.png')\" height=\"32\" width=\"120\"/>\r\n          <i v-if=\"selectedMethod === '微信支付'\" class=\"fa fa-check-circle\">✓</i>\r\n        </li>\r\n      </ul>\r\n      <div class=\"payment-button\">\r\n        <button @click=\"confirmPayment\">确认支付</button>\r\n      </div>\r\n    </div>\r\n    \r\n    <div v-else-if=\"paymentStatus === 'processing'\" class=\"payment-processing\">\r\n      <div class=\"loading-spinner\"></div>\r\n      <p>支付处理中，请稍候...</p>\r\n    </div>\r\n    \r\n    <div v-else-if=\"paymentStatus === 'success'\" class=\"payment-success\">\r\n      <div class=\"success-icon\">✓</div>\r\n      <p>支付成功！</p>\r\n      <p>订单号: {{ orderId }}</p>\r\n      <button @click=\"viewOrder\">查看订单</button>\r\n    </div>\r\n    \r\n    <div v-else-if=\"paymentStatus === 'failed'\" class=\"payment-failed\">\r\n      <div class=\"failed-icon\">✗</div>\r\n      <p>支付失败！</p>\r\n      <p>{{ errorMessage }}</p>\r\n      <button @click=\"retryPayment\">重新支付</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, onMounted } from 'vue';\r\nimport { useRoute, useRouter } from 'vue-router';\r\nimport { paymentApi } from '@/utils/api';\r\n\r\nconst route = useRoute();\r\nconst router = useRouter();\r\nconst businessName = ref(route.query.businessName || '未知店铺');\r\nconst orderId = ref(route.query.orderId || null);\r\nconst isNetworkError = ref(route.query.isNetworkError === 'true');\r\n\r\n// 支付状态：pending-待支付, processing-处理中, success-成功, failed-失败\r\nconst paymentStatus = ref('pending');\r\nconst errorMessage = ref('');\r\nconst paymentId = ref(null);\r\n\r\n// 使用computed保证响应性，并且确保totalPrice是数字类型\r\nconst totalPrice = computed(() => {\r\n  return route.query.totalAmount ? parseFloat(route.query.totalAmount) : 0;\r\n});\r\n\r\nconst selectedMethod = ref('支付宝'); // 默认选中支付宝\r\n\r\nfunction selectPaymentMethod(method) {\r\n  selectedMethod.value = method;\r\n}\r\n\r\nasync function confirmPayment() {\r\n  if (!selectedMethod.value) {\r\n    alert('请选择支付方式');\r\n    return;\r\n  }\r\n  \r\n  if (!orderId.value) {\r\n    alert('订单信息不完整，无法完成支付');\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    paymentStatus.value = 'processing';\r\n    \r\n    // 构建支付请求数据\r\n    const paymentData = {\r\n      orderId: parseInt(orderId.value),\r\n      paymentMethod: selectedMethod.value\r\n    };\r\n    \r\n    console.log('发送支付请求:', paymentData);\r\n    \r\n    // 调用支付处理API\r\n    const response = await paymentApi.processPayment(paymentData);\r\n    console.log('支付响应:', response);\r\n    \r\n    if (response && (response.code === 1 || response.success)) {\r\n      // 支付处理成功\r\n      if (response.data) {\r\n        paymentId.value = response.data.paymentId;\r\n      }\r\n      \r\n      // 模拟支付验证过程\r\n      setTimeout(async () => {\r\n        try {\r\n          // 如果有支付ID，验证支付状态\r\n          if (paymentId.value) {\r\n            const verifyResponse = await paymentApi.verifyPayment(paymentId.value);\r\n            console.log('支付验证响应:', verifyResponse);\r\n            \r\n            if (verifyResponse && verifyResponse.code === 1 && verifyResponse.data && verifyResponse.data.verified) {\r\n              paymentSuccess();\r\n            } else {\r\n              paymentFailed('支付验证失败');\r\n            }\r\n          } else {\r\n            // 如果没有支付ID，也当作成功处理（演示目的）\r\n            paymentSuccess();\r\n          }\r\n        } catch (verifyError) {\r\n          console.error('支付验证错误:', verifyError);\r\n          // 在演示环境中，仍然当作成功处理\r\n          paymentSuccess();\r\n        }\r\n      }, 2000); // 2秒后验证\r\n      \r\n    } else {\r\n      paymentFailed(response?.msg || '支付处理失败');\r\n    }\r\n  } catch (error) {\r\n    console.error('支付请求错误:', error);\r\n    \r\n    // 演示环境下，仍然模拟支付成功\r\n    setTimeout(() => {\r\n      paymentSuccess();\r\n    }, 2000);\r\n  }\r\n}\r\n\r\nfunction paymentSuccess() {\r\n  paymentStatus.value = 'success';\r\n  // 保存支付成功信息到localStorage\r\n  localStorage.setItem('lastPaymentSuccess', 'true');\r\n  localStorage.setItem('lastPaidOrderId', orderId.value);\r\n}\r\n\r\nfunction paymentFailed(message) {\r\n  paymentStatus.value = 'failed';\r\n  errorMessage.value = message || '支付过程中发生错误';\r\n}\r\n\r\nfunction retryPayment() {\r\n  paymentStatus.value = 'pending';\r\n  errorMessage.value = '';\r\n}\r\n\r\nfunction viewOrder() {\r\n  router.push({\r\n    name: 'OrderDetail',\r\n    params: { orderId: orderId.value }\r\n  });\r\n}\r\n\r\nfunction goBack() {\r\n  router.push({ name: 'Home' });\r\n}\r\n\r\nonMounted(() => {\r\n  // 如果是从订单页面跳转过来的网络错误情况，我们仍然允许支付\r\n  if (isNetworkError.value) {\r\n    console.log('检测到网络错误标记，但仍然允许支付');\r\n  }\r\n  \r\n  // 如果没有订单ID，尝试从localStorage获取\r\n  if (!orderId.value) {\r\n    orderId.value = localStorage.getItem('currentOrderId');\r\n    console.log('从localStorage获取订单ID:', orderId.value);\r\n  }\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.wrapper{\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n\r\n.wrapper .header .title{\r\n  display: flex;\r\n  align-items: center;\r\n  background-color: red;\r\n  text-align: center;\r\n  height: 18vw;\r\n  position: fixed;\r\n  left: 0;\r\n  top: 0;\r\n  right: 0;\r\n\r\n\r\n}\r\n\r\n.wrapper .header .title .p1{\r\n  flex: 1;\r\n  color: white;\r\n\r\n}\r\n\r\n\r\n.wrapper .header .title .p2{\r\n  flex: 9;\r\n  color: white;\r\n  font-size: 4.5vw;\r\n  padding-right: 6vw;\r\n}\r\n\r\n/*订单信息*/\r\n.wrapper h3{\r\n  box-sizing: border-box;\r\n  padding: 4vw 4vw 0;\r\n  margin-top: 18vw;\r\n  font-size: 4vw;\r\n  font-weight: 300;\r\n  color: #9F9F9F;\r\n}\r\n\r\n.wrapper .orders-info{\r\n  box-sizing: border-box;\r\n  padding: 4vw;\r\n  font-size: 4vw;\r\n  color: #666;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.wrapper .orders-info p:last-child{\r\n  color: orangered;\r\n}\r\n\r\n/*支付方式*/\r\n.wrapper .payment-type{\r\n  width: 100%;\r\n  padding-left: 0;\r\n}\r\n\r\n.wrapper .payment-type li{\r\n  width: 90%;\r\n  padding:4vw;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\n.wrapper .payment-type li img{\r\n  width: 33vw;\r\n  height: 8.9vw;\r\n}\r\n\r\n.wrapper .payment-type li .fa-check-circle{\r\n  font-size: 5vw;\r\n  color: #38ca73;\r\n}\r\n\r\n.wrapper .payment-button{\r\n  width: 90%;\r\n  box-sizing: border-box;\r\n  padding:4vw;\r\n  outline: none;\r\n  margin-left: 4vw;\r\n}\r\n\r\n.wrapper .payment-button button{\r\n  width: 100%;\r\n  height: 10vw;\r\n  margin: 0 auto;\r\n  border: none;\r\n  outline: none;\r\n  border-radius: 4px;\r\n  background-color: #38ca73;\r\n  color: white;\r\n}\r\n\r\n/* 支付处理中样式 */\r\n.payment-processing {\r\n  text-align: center;\r\n  padding: 20px;\r\n  margin-top: 30px;\r\n}\r\n\r\n.loading-spinner {\r\n  border: 4px solid rgba(0, 0, 0, 0.1);\r\n  border-radius: 50%;\r\n  border-top: 4px solid #38ca73;\r\n  width: 40px;\r\n  height: 40px;\r\n  margin: 20px auto;\r\n  animation: spin 1s linear infinite;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n/* 支付成功样式 */\r\n.payment-success {\r\n  text-align: center;\r\n  padding: 20px;\r\n  margin-top: 30px;\r\n}\r\n\r\n.success-icon {\r\n  background-color: #38ca73;\r\n  color: white;\r\n  width: 60px;\r\n  height: 60px;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 30px;\r\n  margin: 0 auto 20px;\r\n}\r\n\r\n.payment-success button {\r\n  background-color: #38ca73;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 4px;\r\n  margin-top: 20px;\r\n  cursor: pointer;\r\n}\r\n\r\n/* 支付失败样式 */\r\n.payment-failed {\r\n  text-align: center;\r\n  padding: 20px;\r\n  margin-top: 30px;\r\n}\r\n\r\n.failed-icon {\r\n  background-color: #ff4d4f;\r\n  color: white;\r\n  width: 60px;\r\n  height: 60px;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 30px;\r\n  margin: 0 auto 20px;\r\n}\r\n\r\n.payment-failed button {\r\n  background-color: #ff4d4f;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 4px;\r\n  margin-top: 20px;\r\n  cursor: pointer;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}