{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, useSlots, ref, computed, provide, reactive, watch, onBeforeUpdate, onMounted, openBlock, createElementBlock, normalizeClass, unref, Fragment, renderList, createBlock, withCtx, renderSlot, nextTick } from 'vue';\nimport { isEqual, flattenDeep, cloneDeep } from 'lodash-unified';\nimport ElCascaderMenu from './menu.mjs';\nimport Store from './store.mjs';\nimport Node from './node.mjs';\nimport { cascaderPanelProps, cascaderPanelEmits, useCascaderConfig } from './config.mjs';\nimport { sortByOriginalOrder, checkNode, getMenuIndex } from './utils.mjs';\nimport { CASCADER_PANEL_INJECTION_KEY } from './types.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { unique, castArray } from '../../../utils/arrays.mjs';\nimport { scrollIntoView } from '../../../utils/dom/scroll.mjs';\nimport { focusNode, getSibling } from '../../../utils/dom/aria.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { isEmpty } from '../../../utils/types.mjs';\nimport { isClient } from '@vueuse/core';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nconst __default__ = defineComponent({\n  name: \"ElCascaderPanel\",\n  inheritAttrs: false\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: cascaderPanelProps,\n  emits: cascaderPanelEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    let manualChecked = false;\n    const ns = useNamespace(\"cascader\");\n    const config = useCascaderConfig(props);\n    const slots = useSlots();\n    let store;\n    const initialLoaded = ref(true);\n    const menuList = ref([]);\n    const checkedValue = ref();\n    const menus = ref([]);\n    const expandingNode = ref();\n    const checkedNodes = ref([]);\n    const isHoverMenu = computed(() => config.value.expandTrigger === \"hover\");\n    const renderLabelFn = computed(() => props.renderLabel || slots.default);\n    const initStore = () => {\n      const {\n        options\n      } = props;\n      const cfg = config.value;\n      manualChecked = false;\n      store = new Store(options, cfg);\n      menus.value = [store.getNodes()];\n      if (cfg.lazy && isEmpty(props.options)) {\n        initialLoaded.value = false;\n        lazyLoad(void 0, list => {\n          if (list) {\n            store = new Store(list, cfg);\n            menus.value = [store.getNodes()];\n          }\n          initialLoaded.value = true;\n          syncCheckedValue(false, true);\n        });\n      } else {\n        syncCheckedValue(false, true);\n      }\n    };\n    const lazyLoad = (node, cb) => {\n      const cfg = config.value;\n      node = node || new Node({}, cfg, void 0, true);\n      node.loading = true;\n      const resolve = dataList => {\n        const _node = node;\n        const parent = _node.root ? null : _node;\n        dataList && (store == null ? void 0 : store.appendNodes(dataList, parent));\n        _node.loading = false;\n        _node.loaded = true;\n        _node.childrenData = _node.childrenData || [];\n        dataList && (cb == null ? void 0 : cb(dataList));\n      };\n      cfg.lazyLoad(node, resolve);\n    };\n    const expandNode = (node, silent) => {\n      var _a;\n      const {\n        level\n      } = node;\n      const newMenus = menus.value.slice(0, level);\n      let newExpandingNode;\n      if (node.isLeaf) {\n        newExpandingNode = node.pathNodes[level - 2];\n      } else {\n        newExpandingNode = node;\n        newMenus.push(node.children);\n      }\n      if (((_a = expandingNode.value) == null ? void 0 : _a.uid) !== (newExpandingNode == null ? void 0 : newExpandingNode.uid)) {\n        expandingNode.value = node;\n        menus.value = newMenus;\n        !silent && emit(\"expand-change\", (node == null ? void 0 : node.pathValues) || []);\n      }\n    };\n    const handleCheckChange = (node, checked, emitClose = true) => {\n      const {\n        checkStrictly,\n        multiple\n      } = config.value;\n      const oldNode = checkedNodes.value[0];\n      manualChecked = true;\n      !multiple && (oldNode == null ? void 0 : oldNode.doCheck(false));\n      node.doCheck(checked);\n      calculateCheckedValue();\n      emitClose && !multiple && !checkStrictly && emit(\"close\");\n      !emitClose && !multiple && !checkStrictly && expandParentNode(node);\n    };\n    const expandParentNode = node => {\n      if (!node) return;\n      node = node.parent;\n      expandParentNode(node);\n      node && expandNode(node);\n    };\n    const getFlattedNodes = leafOnly => store == null ? void 0 : store.getFlattedNodes(leafOnly);\n    const getCheckedNodes = leafOnly => {\n      var _a;\n      return (_a = getFlattedNodes(leafOnly)) == null ? void 0 : _a.filter(({\n        checked\n      }) => checked !== false);\n    };\n    const clearCheckedNodes = () => {\n      checkedNodes.value.forEach(node => node.doCheck(false));\n      calculateCheckedValue();\n      menus.value = menus.value.slice(0, 1);\n      expandingNode.value = void 0;\n      emit(\"expand-change\", []);\n    };\n    const calculateCheckedValue = () => {\n      const {\n        checkStrictly,\n        multiple\n      } = config.value;\n      const oldNodes = checkedNodes.value;\n      const newNodes = getCheckedNodes(!checkStrictly);\n      const nodes = sortByOriginalOrder(oldNodes, newNodes);\n      const values = nodes.map(node => node.valueByOption);\n      checkedNodes.value = nodes;\n      checkedValue.value = multiple ? values : values[0];\n    };\n    const syncCheckedValue = (loaded = false, forced = false) => {\n      const {\n        modelValue\n      } = props;\n      const {\n        lazy,\n        multiple,\n        checkStrictly\n      } = config.value;\n      const leafOnly = !checkStrictly;\n      if (!initialLoaded.value || manualChecked || !forced && isEqual(modelValue, checkedValue.value)) return;\n      if (lazy && !loaded) {\n        const values = unique(flattenDeep(castArray(modelValue)));\n        const nodes = values.map(val => store == null ? void 0 : store.getNodeByValue(val)).filter(node => !!node && !node.loaded && !node.loading);\n        if (nodes.length) {\n          nodes.forEach(node => {\n            lazyLoad(node, () => syncCheckedValue(false, forced));\n          });\n        } else {\n          syncCheckedValue(true, forced);\n        }\n      } else {\n        const values = multiple ? castArray(modelValue) : [modelValue];\n        const nodes = unique(values.map(val => store == null ? void 0 : store.getNodeByValue(val, leafOnly)));\n        syncMenuState(nodes, forced);\n        checkedValue.value = cloneDeep(modelValue);\n      }\n    };\n    const syncMenuState = (newCheckedNodes, reserveExpandingState = true) => {\n      const {\n        checkStrictly\n      } = config.value;\n      const oldNodes = checkedNodes.value;\n      const newNodes = newCheckedNodes.filter(node => !!node && (checkStrictly || node.isLeaf));\n      const oldExpandingNode = store == null ? void 0 : store.getSameNode(expandingNode.value);\n      const newExpandingNode = reserveExpandingState && oldExpandingNode || newNodes[0];\n      if (newExpandingNode) {\n        newExpandingNode.pathNodes.forEach(node => expandNode(node, true));\n      } else {\n        expandingNode.value = void 0;\n      }\n      oldNodes.forEach(node => node.doCheck(false));\n      reactive(newNodes).forEach(node => node.doCheck(true));\n      checkedNodes.value = newNodes;\n      nextTick(scrollToExpandingNode);\n    };\n    const scrollToExpandingNode = () => {\n      if (!isClient) return;\n      menuList.value.forEach(menu => {\n        const menuElement = menu == null ? void 0 : menu.$el;\n        if (menuElement) {\n          const container = menuElement.querySelector(`.${ns.namespace.value}-scrollbar__wrap`);\n          const activeNode = menuElement.querySelector(`.${ns.b(\"node\")}.${ns.is(\"active\")}:last-child`) || menuElement.querySelector(`.${ns.b(\"node\")}.in-active-path`);\n          scrollIntoView(container, activeNode);\n        }\n      });\n    };\n    const handleKeyDown = e => {\n      const target = e.target;\n      const {\n        code\n      } = e;\n      switch (code) {\n        case EVENT_CODE.up:\n        case EVENT_CODE.down:\n          {\n            e.preventDefault();\n            const distance = code === EVENT_CODE.up ? -1 : 1;\n            focusNode(getSibling(target, distance, `.${ns.b(\"node\")}[tabindex=\"-1\"]`));\n            break;\n          }\n        case EVENT_CODE.left:\n          {\n            e.preventDefault();\n            const preMenu = menuList.value[getMenuIndex(target) - 1];\n            const expandedNode = preMenu == null ? void 0 : preMenu.$el.querySelector(`.${ns.b(\"node\")}[aria-expanded=\"true\"]`);\n            focusNode(expandedNode);\n            break;\n          }\n        case EVENT_CODE.right:\n          {\n            e.preventDefault();\n            const nextMenu = menuList.value[getMenuIndex(target) + 1];\n            const firstNode = nextMenu == null ? void 0 : nextMenu.$el.querySelector(`.${ns.b(\"node\")}[tabindex=\"-1\"]`);\n            focusNode(firstNode);\n            break;\n          }\n        case EVENT_CODE.enter:\n        case EVENT_CODE.numpadEnter:\n          checkNode(target);\n          break;\n      }\n    };\n    provide(CASCADER_PANEL_INJECTION_KEY, reactive({\n      config,\n      expandingNode,\n      checkedNodes,\n      isHoverMenu,\n      initialLoaded,\n      renderLabelFn,\n      lazyLoad,\n      expandNode,\n      handleCheckChange\n    }));\n    watch([config, () => props.options], (newVal, oldVal) => {\n      if (isEqual(newVal, oldVal)) return;\n      initStore();\n    }, {\n      deep: true,\n      immediate: true\n    });\n    watch(() => props.modelValue, () => {\n      manualChecked = false;\n      syncCheckedValue();\n    }, {\n      deep: true\n    });\n    watch(() => checkedValue.value, val => {\n      if (!isEqual(val, props.modelValue)) {\n        emit(UPDATE_MODEL_EVENT, val);\n        emit(CHANGE_EVENT, val);\n      }\n    });\n    onBeforeUpdate(() => menuList.value = []);\n    onMounted(() => !isEmpty(props.modelValue) && syncCheckedValue());\n    expose({\n      menuList,\n      menus,\n      checkedNodes,\n      handleKeyDown,\n      handleCheckChange,\n      getFlattedNodes,\n      getCheckedNodes,\n      clearCheckedNodes,\n      calculateCheckedValue,\n      scrollToExpandingNode\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass([unref(ns).b(\"panel\"), unref(ns).is(\"bordered\", _ctx.border)]),\n        onKeydown: handleKeyDown\n      }, [(openBlock(true), createElementBlock(Fragment, null, renderList(menus.value, (menu, index) => {\n        return openBlock(), createBlock(ElCascaderMenu, {\n          key: index,\n          ref_for: true,\n          ref: item => menuList.value[index] = item,\n          index,\n          nodes: [...menu]\n        }, {\n          empty: withCtx(() => [renderSlot(_ctx.$slots, \"empty\")]),\n          _: 2\n        }, 1032, [\"index\", \"nodes\"]);\n      }), 128))], 34);\n    };\n  }\n});\nvar CascaderPanel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"index.vue\"]]);\nexport { CascaderPanel as default };","map":{"version":3,"names":["name","inheritAttrs","manualChecked","ns","useNamespace","config","useCascaderConfig","props","slots","useSlots","store","initialLoaded","ref","menuList","checkedValue","menus","expandingNode","checkedNodes","isHoverMenu","computed","value","expandTrigger","renderLabelFn","renderLabel","default","initStore","options","cfg","Store","getNodes","lazy","isEmpty","lazyLoad","list","syncCheckedValue","node","cb","Node","loading","resolve","dataList","_node","parent","root","appendNodes","loaded","childrenData","expandNode","silent","_a","level","newMenus","slice","newExpandingNode","isLeaf","pathNodes","push","children","uid","emit","pathValues","handleCheckChange","checked","emitClose","checkStrictly","multiple","oldNode","doCheck","calculateCheckedValue","expandParentNode","getFlattedNodes","leafOnly","getCheckedNodes","filter","clearCheckedNodes","forEach","oldNodes","newNodes","nodes","sortByOriginalOrder","values","map","valueByOption","forced","modelValue","isEqual","unique","flattenDeep","castArray","val","getNodeByValue","length","syncMenuState","cloneDeep","newCheckedNodes","reserveExpandingState","oldExpandingNode","getSameNode","reactive","nextTick","scrollToExpandingNode","isClient","menu","menuElement","$el","container","querySelector","namespace","activeNode","b","is","scrollIntoView","handleKeyDown","e","target","code","EVENT_CODE","up","down","preventDefault","distance","focusNode","getSibling","left","preMenu","getMenuIndex","expandedNode","right","nextMenu","firstNode","enter","numpadEnter","checkNode","provide","CASCADER_PANEL_INJECTION_KEY","watch","newVal","oldVal","deep","immediate","UPDATE_MODEL_EVENT","CHANGE_EVENT","onBeforeUpdate","onMounted","expose","_ctx","_cache","openBlock","createElementBlock","class","normalizeClass","unref","border","onKeydown","Fragment","renderList","index","createBlock","ElCascaderMenu","key","ref_for","item","empty","withCtx","renderSlot","$slots","_","CascaderPanel","_export_sfc","_sfc_main"],"sources":["../../../../../../packages/components/cascader-panel/src/index.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[ns.b('panel'), ns.is('bordered', border)]\"\n    @keydown=\"handleKeyDown\"\n  >\n    <el-cascader-menu\n      v-for=\"(menu, index) in menus\"\n      :key=\"index\"\n      :ref=\"(item) => (menuList[index] = item as CascaderMenuInstance)\"\n      :index=\"index\"\n      :nodes=\"[...menu]\"\n    >\n      <template #empty>\n        <slot name=\"empty\" />\n      </template>\n    </el-cascader-menu>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  nextTick,\n  onBeforeUpdate,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  useSlots,\n  watch,\n} from 'vue'\nimport { cloneDeep, flattenDeep, isEqual } from 'lodash-unified'\nimport {\n  castArray,\n  focusNode,\n  getSibling,\n  isClient,\n  isEmpty,\n  scrollIntoView,\n  unique,\n} from '@element-plus/utils'\nimport {\n  CHANGE_EVENT,\n  EVENT_CODE,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport { useNamespace } from '@element-plus/hooks'\nimport ElCascaderMenu from './menu.vue'\nimport Store from './store'\nimport Node from './node'\nimport {\n  cascaderPanelEmits,\n  cascaderPanelProps,\n  useCascaderConfig,\n} from './config'\nimport { checkNode, getMenuIndex, sortByOriginalOrder } from './utils'\nimport { CASCADER_PANEL_INJECTION_KEY } from './types'\n\nimport type {\n  default as CascaderNode,\n  CascaderNodeValue,\n  CascaderOption,\n  CascaderValue,\n} from './node'\nimport type { ElCascaderPanelContext } from './types'\nimport type { CascaderMenuInstance } from './instance'\n\ndefineOptions({\n  name: 'ElCascaderPanel',\n  inheritAttrs: false,\n})\n\nconst props = defineProps(cascaderPanelProps)\nconst emit = defineEmits(cascaderPanelEmits)\n\n// for interrupt sync check status in lazy mode\nlet manualChecked = false\n\nconst ns = useNamespace('cascader')\nconst config = useCascaderConfig(props)\nconst slots = useSlots()\n\nlet store: Store\nconst initialLoaded = ref(true)\nconst menuList = ref<CascaderMenuInstance[]>([])\nconst checkedValue = ref<CascaderValue>()\nconst menus = ref<CascaderNode[][]>([])\nconst expandingNode = ref<CascaderNode>()\nconst checkedNodes = ref<CascaderNode[]>([])\n\nconst isHoverMenu = computed(() => config.value.expandTrigger === 'hover')\nconst renderLabelFn = computed(() => props.renderLabel || slots.default)\n\nconst initStore = () => {\n  const { options } = props\n  const cfg = config.value\n\n  manualChecked = false\n  store = new Store(options, cfg)\n  menus.value = [store.getNodes()]\n\n  if (cfg.lazy && isEmpty(props.options)) {\n    initialLoaded.value = false\n    lazyLoad(undefined, (list) => {\n      if (list) {\n        store = new Store(list, cfg)\n        menus.value = [store.getNodes()]\n      }\n      initialLoaded.value = true\n      syncCheckedValue(false, true)\n    })\n  } else {\n    syncCheckedValue(false, true)\n  }\n}\n\nconst lazyLoad: ElCascaderPanelContext['lazyLoad'] = (node, cb) => {\n  const cfg = config.value\n  node! = node || new Node({}, cfg, undefined, true)\n  node.loading = true\n\n  const resolve = (dataList?: CascaderOption[]) => {\n    const _node = node as Node\n    const parent = _node.root ? null : _node\n    dataList && store?.appendNodes(dataList, parent as Node)\n    _node.loading = false\n    _node.loaded = true\n    _node.childrenData = _node.childrenData || []\n    dataList && cb?.(dataList)\n  }\n\n  cfg.lazyLoad(node, resolve)\n}\n\nconst expandNode: ElCascaderPanelContext['expandNode'] = (node, silent) => {\n  const { level } = node\n  const newMenus = menus.value.slice(0, level)\n  let newExpandingNode: CascaderNode\n\n  if (node.isLeaf) {\n    newExpandingNode = node.pathNodes[level - 2]\n  } else {\n    newExpandingNode = node\n    newMenus.push(node.children)\n  }\n\n  if (expandingNode.value?.uid !== newExpandingNode?.uid) {\n    expandingNode.value = node\n    menus.value = newMenus\n    !silent && emit('expand-change', node?.pathValues || [])\n  }\n}\n\nconst handleCheckChange: ElCascaderPanelContext['handleCheckChange'] = (\n  node,\n  checked,\n  emitClose = true\n) => {\n  const { checkStrictly, multiple } = config.value\n  const oldNode = checkedNodes.value[0]\n  manualChecked = true\n\n  !multiple && oldNode?.doCheck(false)\n  node.doCheck(checked)\n  calculateCheckedValue()\n  emitClose && !multiple && !checkStrictly && emit('close')\n  !emitClose && !multiple && !checkStrictly && expandParentNode(node)\n}\n\nconst expandParentNode = (node: Node | undefined) => {\n  if (!node) return\n  node = node.parent\n  expandParentNode(node)\n  node && expandNode(node)\n}\n\nconst getFlattedNodes = (leafOnly: boolean) => store?.getFlattedNodes(leafOnly)\n\nconst getCheckedNodes = (leafOnly: boolean) => {\n  return getFlattedNodes(leafOnly)?.filter(({ checked }) => checked !== false)\n}\n\nconst clearCheckedNodes = () => {\n  checkedNodes.value.forEach((node) => node.doCheck(false))\n  calculateCheckedValue()\n  menus.value = menus.value.slice(0, 1)\n  expandingNode.value = undefined\n  emit('expand-change', [])\n}\n\nconst calculateCheckedValue = () => {\n  const { checkStrictly, multiple } = config.value\n  const oldNodes = checkedNodes.value\n  const newNodes = getCheckedNodes(!checkStrictly)!\n  // ensure the original order\n  const nodes = sortByOriginalOrder(oldNodes, newNodes)\n  const values = nodes.map((node) => node.valueByOption)\n  checkedNodes.value = nodes\n  checkedValue.value = multiple ? values : values[0]\n}\n\nconst syncCheckedValue = (loaded = false, forced = false) => {\n  const { modelValue } = props\n  const { lazy, multiple, checkStrictly } = config.value\n  const leafOnly = !checkStrictly\n\n  if (\n    !initialLoaded.value ||\n    manualChecked ||\n    (!forced && isEqual(modelValue, checkedValue.value))\n  )\n    return\n\n  if (lazy && !loaded) {\n    const values: CascaderNodeValue[] = unique(\n      flattenDeep(castArray(modelValue as CascaderNodeValue[]))\n    )\n    const nodes = values\n      .map((val) => store?.getNodeByValue(val))\n      .filter((node) => !!node && !node.loaded && !node.loading) as Node[]\n\n    if (nodes.length) {\n      nodes.forEach((node) => {\n        lazyLoad(node, () => syncCheckedValue(false, forced))\n      })\n    } else {\n      syncCheckedValue(true, forced)\n    }\n  } else {\n    const values = multiple ? castArray(modelValue) : [modelValue]\n    const nodes = unique(\n      values.map((val) =>\n        store?.getNodeByValue(val as CascaderNodeValue, leafOnly)\n      )\n    ) as Node[]\n    syncMenuState(nodes, forced)\n    checkedValue.value = cloneDeep(modelValue)\n  }\n}\n\nconst syncMenuState = (\n  newCheckedNodes: CascaderNode[],\n  reserveExpandingState = true\n) => {\n  const { checkStrictly } = config.value\n  const oldNodes = checkedNodes.value\n  const newNodes = newCheckedNodes.filter(\n    (node) => !!node && (checkStrictly || node.isLeaf)\n  )\n  const oldExpandingNode = store?.getSameNode(expandingNode.value!)\n  const newExpandingNode =\n    (reserveExpandingState && oldExpandingNode) || newNodes[0]\n\n  if (newExpandingNode) {\n    newExpandingNode.pathNodes.forEach((node) => expandNode(node, true))\n  } else {\n    expandingNode.value = undefined\n  }\n\n  oldNodes.forEach((node) => node.doCheck(false))\n  reactive(newNodes).forEach((node) => node.doCheck(true))\n  checkedNodes.value = newNodes\n  nextTick(scrollToExpandingNode)\n}\n\nconst scrollToExpandingNode = () => {\n  if (!isClient) return\n\n  menuList.value.forEach((menu) => {\n    const menuElement = menu?.$el\n    if (menuElement) {\n      const container = menuElement.querySelector(\n        `.${ns.namespace.value}-scrollbar__wrap`\n      )\n      const activeNode =\n        menuElement.querySelector(\n          `.${ns.b('node')}.${ns.is('active')}:last-child`\n        ) || menuElement.querySelector(`.${ns.b('node')}.in-active-path`)\n      scrollIntoView(container, activeNode)\n    }\n  })\n}\n\nconst handleKeyDown = (e: KeyboardEvent) => {\n  const target = e.target as HTMLElement\n  const { code } = e\n\n  switch (code) {\n    case EVENT_CODE.up:\n    case EVENT_CODE.down: {\n      e.preventDefault()\n      const distance = code === EVENT_CODE.up ? -1 : 1\n      focusNode(\n        getSibling(\n          target,\n          distance,\n          `.${ns.b('node')}[tabindex=\"-1\"]`\n        ) as HTMLElement\n      )\n      break\n    }\n    case EVENT_CODE.left: {\n      e.preventDefault()\n      const preMenu = menuList.value[getMenuIndex(target) - 1]\n      const expandedNode = preMenu?.$el.querySelector(\n        `.${ns.b('node')}[aria-expanded=\"true\"]`\n      )\n      focusNode(expandedNode)\n      break\n    }\n    case EVENT_CODE.right: {\n      e.preventDefault()\n      const nextMenu = menuList.value[getMenuIndex(target) + 1]\n      const firstNode = nextMenu?.$el.querySelector(\n        `.${ns.b('node')}[tabindex=\"-1\"]`\n      )\n      focusNode(firstNode)\n      break\n    }\n    case EVENT_CODE.enter:\n    case EVENT_CODE.numpadEnter:\n      checkNode(target)\n      break\n  }\n}\n\nprovide(\n  CASCADER_PANEL_INJECTION_KEY,\n  reactive({\n    config,\n    expandingNode,\n    checkedNodes,\n    isHoverMenu,\n    initialLoaded,\n    renderLabelFn,\n    lazyLoad,\n    expandNode,\n    handleCheckChange,\n  })\n)\n\nwatch(\n  [config, () => props.options],\n  (newVal, oldVal) => {\n    if (isEqual(newVal, oldVal)) return\n    initStore()\n  },\n  {\n    deep: true,\n    immediate: true,\n  }\n)\n\nwatch(\n  () => props.modelValue,\n  () => {\n    manualChecked = false\n    syncCheckedValue()\n  },\n  {\n    deep: true,\n  }\n)\n\nwatch(\n  () => checkedValue.value,\n  (val) => {\n    if (!isEqual(val, props.modelValue)) {\n      emit(UPDATE_MODEL_EVENT, val)\n      emit(CHANGE_EVENT, val)\n    }\n  }\n)\n\nonBeforeUpdate(() => (menuList.value = []))\n\nonMounted(() => !isEmpty(props.modelValue) && syncCheckedValue())\n\ndefineExpose({\n  menuList,\n  menus,\n  checkedNodes,\n  handleKeyDown,\n  handleCheckChange,\n  getFlattedNodes,\n  /**\n   * @description get an array of currently selected node,(leafOnly) whether only return the leaf checked nodes, default is `false`\n   */\n  getCheckedNodes,\n  /**\n   * @description clear checked nodes\n   */\n  clearCheckedNodes,\n  calculateCheckedValue,\n  scrollToExpandingNode,\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}