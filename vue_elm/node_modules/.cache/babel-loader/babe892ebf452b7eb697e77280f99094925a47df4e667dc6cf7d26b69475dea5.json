{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport router from \"@/router\";\nimport { deliveryAddressApi } from '@/utils/api';\nexport default {\n  __name: 'updataComponent',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const route = useRoute();\n    const userId = ref(route.params.userId);\n    // 初始化地址对象\n    const address = ref({\n      contactName: '',\n      contactSex: 1,\n      contactTel: '',\n      address: '',\n      userId: userId.value\n    });\n    console.log(\"初始化地址表单，用户ID:\", userId.value);\n    onMounted(async () => {\n      // 从 localStorage 获取要编辑的地址\n      const selectedAddress = JSON.parse(localStorage.getItem('selectedAddressForEdit'));\n      if (selectedAddress) {\n        address.value = selectedAddress;\n        console.log(\"加载编辑地址:\", address.value);\n      } else {\n        address.value = {\n          contactName: '',\n          contactSex: 1,\n          contactTel: '',\n          address: '',\n          userId: userId.value\n        };\n        console.log(\"创建新地址，用户ID:\", userId.value);\n      }\n    });\n    const addAddress = async () => {\n      try {\n        // 确保发送请求时 address 对象包含 userId\n        if (address.value.daId) {\n          delete address.value.daId; // 新增地址不需要ID\n        }\n        if (!address.value.contactSex) {\n          address.value.contactSex = 1; // 默认为男性\n        }\n        address.value.userId = userId.value; // 确保这里正确设置了 userId\n\n        console.log(\"提交地址数据:\", address.value);\n\n        // 使用配置好的API调用微服务\n        const response = await deliveryAddressApi.addDeliveryAddress(address.value);\n        console.log(\"添加地址响应:\", response);\n        if (response && (response.code === 1 || response.success)) {\n          alert('地址添加成功');\n          router.back(); // 返回上一页\n        } else {\n          alert('地址添加失败: ' + (response?.msg || '未知错误'));\n        }\n      } catch (error) {\n        console.error('添加地址失败:', error);\n        alert('添加地址失败，请检查网络连接');\n      }\n    };\n    const __returned__ = {\n      route,\n      userId,\n      address,\n      addAddress,\n      ref,\n      onMounted,\n      get useRoute() {\n        return useRoute;\n      },\n      get router() {\n        return router;\n      },\n      get deliveryAddressApi() {\n        return deliveryAddressApi;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","useRoute","router","deliveryAddressApi","route","userId","params","address","contactName","contactSex","contactTel","value","console","log","selectedAddress","JSON","parse","localStorage","getItem","addAddress","daId","response","addDeliveryAddress","code","success","alert","back","msg","error"],"sources":["D:/back_elm/vue_elm/src/components/updataComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"edit-address\">\r\n    <h2>添加新地址</h2>\r\n    <!-- 表单用于编辑地址 -->\r\n    <el-form ref=\"editAddressForm\" :model=\"address\" label-width=\"100px\">\r\n      <el-form-item label=\"地址\">\r\n        <el-input v-model=\"address.address\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"联系人姓名\">\r\n        <el-input v-model=\"address.contactName\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"联系电话\">\r\n        <el-input v-model=\"address.contactTel\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"性别\">\r\n        <el-radio-group v-model=\"address.contactSex\">\r\n          <el-radio :label=\"1\">男</el-radio>\r\n          <el-radio :label=\"0\">女</el-radio>\r\n        </el-radio-group>\r\n      </el-form-item>\r\n      <el-button type=\"primary\" @click=\"addAddress\">保存</el-button>\r\n    </el-form>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue';\r\nimport { useRoute } from 'vue-router';\r\nimport router from \"@/router\";\r\nimport { deliveryAddressApi } from '@/utils/api';\r\n\r\nconst route = useRoute();\r\nconst userId = ref(route.params.userId);\r\n// 初始化地址对象\r\nconst address = ref({\r\n  contactName: '',\r\n  contactSex: 1,\r\n  contactTel: '',\r\n  address: '',\r\n  userId: userId.value\r\n});\r\n\r\nconsole.log(\"初始化地址表单，用户ID:\", userId.value);\r\n\r\nonMounted(async () => {\r\n  // 从 localStorage 获取要编辑的地址\r\n  const selectedAddress = JSON.parse(localStorage.getItem('selectedAddressForEdit'));\r\n  if (selectedAddress) {\r\n    address.value = selectedAddress;\r\n    console.log(\"加载编辑地址:\", address.value);\r\n  } else {\r\n    address.value = {\r\n      contactName: '',\r\n      contactSex: 1,\r\n      contactTel: '',\r\n      address: '',\r\n      userId: userId.value\r\n    };\r\n    console.log(\"创建新地址，用户ID:\", userId.value);\r\n  }\r\n});\r\n\r\nconst addAddress = async () => {\r\n  try {\r\n    // 确保发送请求时 address 对象包含 userId\r\n    if (address.value.daId) {\r\n      delete address.value.daId; // 新增地址不需要ID\r\n    }\r\n    \r\n    if (!address.value.contactSex) {\r\n      address.value.contactSex = 1; // 默认为男性\r\n    }\r\n    \r\n    address.value.userId = userId.value; // 确保这里正确设置了 userId\r\n    \r\n    console.log(\"提交地址数据:\", address.value);\r\n    \r\n    // 使用配置好的API调用微服务\r\n    const response = await deliveryAddressApi.addDeliveryAddress(address.value);\r\n    \r\n    console.log(\"添加地址响应:\", response);\r\n    \r\n    if (response && (response.code === 1 || response.success)) {\r\n      alert('地址添加成功');\r\n      router.back(); // 返回上一页\r\n    } else {\r\n      alert('地址添加失败: ' + (response?.msg || '未知错误'));\r\n    }\r\n  } catch (error) {\r\n    console.error('添加地址失败:', error);\r\n    alert('添加地址失败，请检查网络连接');\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.edit-address {\r\n  max-width: 400px;\r\n  margin: 20px auto;\r\n  padding: 20px;\r\n  border: 1px solid #ebeef5;\r\n  border-radius: 4px;\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n}\r\n</style>"],"mappings":"AA0BA,SAASA,GAAG,EAAEC,SAAS,QAAQ,KAAK;AACpC,SAASC,QAAQ,QAAQ,YAAY;AACrC,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,kBAAkB,QAAQ,aAAa;;;;;;;IAEhD,MAAMC,KAAK,GAAGH,QAAQ,CAAC,CAAC;IACxB,MAAMI,MAAM,GAAGN,GAAG,CAACK,KAAK,CAACE,MAAM,CAACD,MAAM,CAAC;IACvC;IACA,MAAME,OAAO,GAAGR,GAAG,CAAC;MAClBS,WAAW,EAAE,EAAE;MACfC,UAAU,EAAE,CAAC;MACbC,UAAU,EAAE,EAAE;MACdH,OAAO,EAAE,EAAE;MACXF,MAAM,EAAEA,MAAM,CAACM;IACjB,CAAC,CAAC;IAEFC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAER,MAAM,CAACM,KAAK,CAAC;IAE1CX,SAAS,CAAC,YAAY;MACpB;MACA,MAAMc,eAAe,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,wBAAwB,CAAC,CAAC;MAClF,IAAIJ,eAAe,EAAE;QACnBP,OAAO,CAACI,KAAK,GAAGG,eAAe;QAC/BF,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEN,OAAO,CAACI,KAAK,CAAC;MACvC,CAAC,MAAM;QACLJ,OAAO,CAACI,KAAK,GAAG;UACdH,WAAW,EAAE,EAAE;UACfC,UAAU,EAAE,CAAC;UACbC,UAAU,EAAE,EAAE;UACdH,OAAO,EAAE,EAAE;UACXF,MAAM,EAAEA,MAAM,CAACM;QACjB,CAAC;QACDC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAER,MAAM,CAACM,KAAK,CAAC;MAC1C;IACF,CAAC,CAAC;IAEF,MAAMQ,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF;QACA,IAAIZ,OAAO,CAACI,KAAK,CAACS,IAAI,EAAE;UACtB,OAAOb,OAAO,CAACI,KAAK,CAACS,IAAI,CAAC,CAAC;QAC7B;QAEA,IAAI,CAACb,OAAO,CAACI,KAAK,CAACF,UAAU,EAAE;UAC7BF,OAAO,CAACI,KAAK,CAACF,UAAU,GAAG,CAAC,CAAC,CAAC;QAChC;QAEAF,OAAO,CAACI,KAAK,CAACN,MAAM,GAAGA,MAAM,CAACM,KAAK,CAAC,CAAC;;QAErCC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEN,OAAO,CAACI,KAAK,CAAC;;QAErC;QACA,MAAMU,QAAQ,GAAG,MAAMlB,kBAAkB,CAACmB,kBAAkB,CAACf,OAAO,CAACI,KAAK,CAAC;QAE3EC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEQ,QAAQ,CAAC;QAEhC,IAAIA,QAAQ,KAAKA,QAAQ,CAACE,IAAI,KAAK,CAAC,IAAIF,QAAQ,CAACG,OAAO,CAAC,EAAE;UACzDC,KAAK,CAAC,QAAQ,CAAC;UACfvB,MAAM,CAACwB,IAAI,CAAC,CAAC,CAAC,CAAC;QACjB,CAAC,MAAM;UACLD,KAAK,CAAC,UAAU,IAAIJ,QAAQ,EAAEM,GAAG,IAAI,MAAM,CAAC,CAAC;QAC/C;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdhB,OAAO,CAACgB,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;QAC/BH,KAAK,CAAC,gBAAgB,CAAC;MACzB;IACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}