{"ast":null,"code":"import { defineComponent, inject, computed, openBlock, createElementBlock, unref, normalizeClass, createCommentVNode, createBlock, withModifiers, withCtx, createElementVNode, createVNode, Fragment } from 'vue';\nimport { ElCheckbox } from '../../checkbox/index.mjs';\nimport { ElRadio } from '../../radio/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Check, Loading, ArrowRight } from '@element-plus/icons-vue';\nimport NodeContent from './node-content.mjs';\nimport { CASCADER_PANEL_INJECTION_KEY } from './types.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst __default__ = defineComponent({\n  name: \"ElCascaderNode\"\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: {\n    node: {\n      type: Object,\n      required: true\n    },\n    menuId: String\n  },\n  emits: [\"expand\"],\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const panel = inject(CASCADER_PANEL_INJECTION_KEY);\n    const ns = useNamespace(\"cascader-node\");\n    const isHoverMenu = computed(() => panel.isHoverMenu);\n    const multiple = computed(() => panel.config.multiple);\n    const checkStrictly = computed(() => panel.config.checkStrictly);\n    const checkedNodeId = computed(() => {\n      var _a;\n      return (_a = panel.checkedNodes[0]) == null ? void 0 : _a.uid;\n    });\n    const isDisabled = computed(() => props.node.isDisabled);\n    const isLeaf = computed(() => props.node.isLeaf);\n    const expandable = computed(() => checkStrictly.value && !isLeaf.value || !isDisabled.value);\n    const inExpandingPath = computed(() => isInPath(panel.expandingNode));\n    const inCheckedPath = computed(() => checkStrictly.value && panel.checkedNodes.some(isInPath));\n    const isInPath = node => {\n      var _a;\n      const {\n        level,\n        uid\n      } = props.node;\n      return ((_a = node == null ? void 0 : node.pathNodes[level - 1]) == null ? void 0 : _a.uid) === uid;\n    };\n    const doExpand = () => {\n      if (inExpandingPath.value) return;\n      panel.expandNode(props.node);\n    };\n    const doCheck = checked => {\n      const {\n        node\n      } = props;\n      if (checked === node.checked) return;\n      panel.handleCheckChange(node, checked);\n    };\n    const doLoad = () => {\n      panel.lazyLoad(props.node, () => {\n        if (!isLeaf.value) doExpand();\n      });\n    };\n    const handleHoverExpand = e => {\n      if (!isHoverMenu.value) return;\n      handleExpand();\n      !isLeaf.value && emit(\"expand\", e);\n    };\n    const handleExpand = () => {\n      const {\n        node\n      } = props;\n      if (!expandable.value || node.loading) return;\n      node.loaded ? doExpand() : doLoad();\n    };\n    const handleClick = () => {\n      if (isHoverMenu.value && !isLeaf.value) return;\n      if (isLeaf.value && !isDisabled.value && !checkStrictly.value && !multiple.value) {\n        handleCheck(true);\n      } else {\n        handleExpand();\n      }\n    };\n    const handleSelectCheck = checked => {\n      if (checkStrictly.value) {\n        doCheck(checked);\n        if (props.node.loaded) {\n          doExpand();\n        }\n      } else {\n        handleCheck(checked);\n      }\n    };\n    const handleCheck = checked => {\n      if (!props.node.loaded) {\n        doLoad();\n      } else {\n        doCheck(checked);\n        !checkStrictly.value && doExpand();\n      }\n    };\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"li\", {\n        id: `${__props.menuId}-${__props.node.uid}`,\n        role: \"menuitem\",\n        \"aria-haspopup\": !unref(isLeaf),\n        \"aria-owns\": unref(isLeaf) ? void 0 : __props.menuId,\n        \"aria-expanded\": unref(inExpandingPath),\n        tabindex: unref(expandable) ? -1 : void 0,\n        class: normalizeClass([unref(ns).b(), unref(ns).is(\"selectable\", unref(checkStrictly)), unref(ns).is(\"active\", __props.node.checked), unref(ns).is(\"disabled\", !unref(expandable)), unref(inExpandingPath) && \"in-active-path\", unref(inCheckedPath) && \"in-checked-path\"]),\n        onMouseenter: handleHoverExpand,\n        onFocus: handleHoverExpand,\n        onClick: handleClick\n      }, [createCommentVNode(\" prefix \"), unref(multiple) ? (openBlock(), createBlock(unref(ElCheckbox), {\n        key: 0,\n        \"model-value\": __props.node.checked,\n        indeterminate: __props.node.indeterminate,\n        disabled: unref(isDisabled),\n        onClick: withModifiers(() => {}, [\"stop\"]),\n        \"onUpdate:modelValue\": handleSelectCheck\n      }, null, 8, [\"model-value\", \"indeterminate\", \"disabled\", \"onClick\"])) : unref(checkStrictly) ? (openBlock(), createBlock(unref(ElRadio), {\n        key: 1,\n        \"model-value\": unref(checkedNodeId),\n        label: __props.node.uid,\n        disabled: unref(isDisabled),\n        \"onUpdate:modelValue\": handleSelectCheck,\n        onClick: withModifiers(() => {}, [\"stop\"])\n      }, {\n        default: withCtx(() => [createCommentVNode(\"\\n        Add an empty element to avoid render label,\\n        do not use empty fragment here for https://github.com/vuejs/vue-next/pull/2485\\n      \"), createElementVNode(\"span\")]),\n        _: 1\n      }, 8, [\"model-value\", \"label\", \"disabled\", \"onClick\"])) : unref(isLeaf) && __props.node.checked ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 2,\n        class: normalizeClass(unref(ns).e(\"prefix\"))\n      }, {\n        default: withCtx(() => [createVNode(unref(Check))]),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), createVNode(unref(NodeContent), {\n        \"render-label-fn\": unref(panel).renderLabelFn,\n        node: __props.node\n      }, null, 8, [\"render-label-fn\", \"node\"]), createCommentVNode(\" postfix \"), !unref(isLeaf) ? (openBlock(), createElementBlock(Fragment, {\n        key: 3\n      }, [__props.node.loading ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 0,\n        class: normalizeClass([unref(ns).is(\"loading\"), unref(ns).e(\"postfix\")])\n      }, {\n        default: withCtx(() => [createVNode(unref(Loading))]),\n        _: 1\n      }, 8, [\"class\"])) : (openBlock(), createBlock(unref(ElIcon), {\n        key: 1,\n        class: normalizeClass([\"arrow-right\", unref(ns).e(\"postfix\")])\n      }, {\n        default: withCtx(() => [createVNode(unref(ArrowRight))]),\n        _: 1\n      }, 8, [\"class\"]))], 64)) : createCommentVNode(\"v-if\", true)], 42, [\"id\", \"aria-haspopup\", \"aria-owns\", \"aria-expanded\", \"tabindex\"]);\n    };\n  }\n});\nvar ElCascaderNode = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"node.vue\"]]);\nexport { ElCascaderNode as default };","map":{"version":3,"names":["name","panel","inject","CASCADER_PANEL_INJECTION_KEY","ns","useNamespace","isHoverMenu","computed","multiple","config","checkStrictly","checkedNodeId","_a","checkedNodes","uid","isDisabled","props","node","isLeaf","expandable","value","inExpandingPath","isInPath","expandingNode","inCheckedPath","some","level","pathNodes","doExpand","expandNode","doCheck","checked","handleCheckChange","doLoad","lazyLoad","handleHoverExpand","e","handleExpand","emit","loading","loaded","handleClick","handleCheck","handleSelectCheck"],"sources":["../../../../../../packages/components/cascader-panel/src/node.vue"],"sourcesContent":["<template>\n  <li\n    :id=\"`${menuId}-${node.uid}`\"\n    role=\"menuitem\"\n    :aria-haspopup=\"!isLeaf\"\n    :aria-owns=\"isLeaf ? undefined : menuId\"\n    :aria-expanded=\"inExpandingPath\"\n    :tabindex=\"expandable ? -1 : undefined\"\n    :class=\"[\n      ns.b(),\n      ns.is('selectable', checkStrictly),\n      ns.is('active', node.checked),\n      ns.is('disabled', !expandable),\n      inExpandingPath && 'in-active-path',\n      inCheckedPath && 'in-checked-path',\n    ]\"\n    @mouseenter=\"handleHoverExpand\"\n    @focus=\"handleHoverExpand\"\n    @click=\"handleClick\"\n  >\n    <!-- prefix -->\n    <el-checkbox\n      v-if=\"multiple\"\n      :model-value=\"node.checked\"\n      :indeterminate=\"node.indeterminate\"\n      :disabled=\"isDisabled\"\n      @click.stop\n      @update:model-value=\"handleSelectCheck\"\n    />\n    <el-radio\n      v-else-if=\"checkStrictly\"\n      :model-value=\"checkedNodeId\"\n      :label=\"node.uid\"\n      :disabled=\"isDisabled\"\n      @update:model-value=\"handleSelectCheck\"\n      @click.stop\n    >\n      <!--\n        Add an empty element to avoid render label,\n        do not use empty fragment here for https://github.com/vuejs/vue-next/pull/2485\n      -->\n      <span />\n    </el-radio>\n    <el-icon v-else-if=\"isLeaf && node.checked\" :class=\"ns.e('prefix')\">\n      <check />\n    </el-icon>\n\n    <node-content :render-label-fn=\"panel.renderLabelFn\" :node=\"node\" />\n\n    <!-- postfix -->\n    <template v-if=\"!isLeaf\">\n      <el-icon v-if=\"node.loading\" :class=\"[ns.is('loading'), ns.e('postfix')]\">\n        <loading />\n      </el-icon>\n      <el-icon v-else :class=\"['arrow-right', ns.e('postfix')]\">\n        <arrow-right />\n      </el-icon>\n    </template>\n  </li>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, inject } from 'vue'\nimport ElCheckbox from '@element-plus/components/checkbox'\nimport ElRadio from '@element-plus/components/radio'\nimport ElIcon from '@element-plus/components/icon'\nimport { useNamespace } from '@element-plus/hooks'\nimport { ArrowRight, Check, Loading } from '@element-plus/icons-vue'\nimport NodeContent from './node-content'\nimport { CASCADER_PANEL_INJECTION_KEY } from './types'\n\nimport type { default as CascaderNode } from './node'\nimport type { PropType } from 'vue'\nimport type { CheckboxValueType } from '@element-plus/components/checkbox'\n\ndefineOptions({\n  name: 'ElCascaderNode',\n})\n\nconst props = defineProps({\n  node: {\n    type: Object as PropType<CascaderNode>,\n    required: true,\n  },\n  menuId: String,\n})\nconst emit = defineEmits(['expand'])\n\nconst panel = inject(CASCADER_PANEL_INJECTION_KEY)!\n\nconst ns = useNamespace('cascader-node')\nconst isHoverMenu = computed(() => panel.isHoverMenu)\nconst multiple = computed(() => panel.config.multiple)\nconst checkStrictly = computed(() => panel.config.checkStrictly)\nconst checkedNodeId = computed(() => panel.checkedNodes[0]?.uid)\nconst isDisabled = computed(() => props.node.isDisabled)\nconst isLeaf = computed(() => props.node.isLeaf)\nconst expandable = computed(\n  () => (checkStrictly.value && !isLeaf.value) || !isDisabled.value\n)\nconst inExpandingPath = computed(() => isInPath(panel.expandingNode!))\n\n// only useful in check-strictly mode\nconst inCheckedPath = computed(\n  () => checkStrictly.value && panel.checkedNodes.some(isInPath)\n)\n\nconst isInPath = (node: CascaderNode) => {\n  const { level, uid } = props.node\n  return node?.pathNodes[level - 1]?.uid === uid\n}\n\nconst doExpand = () => {\n  if (inExpandingPath.value) return\n  panel.expandNode(props.node)\n}\n\nconst doCheck = (checked: boolean) => {\n  const { node } = props\n  if (checked === node.checked) return\n  panel.handleCheckChange(node, checked)\n}\n\nconst doLoad = () => {\n  panel.lazyLoad(props.node, () => {\n    if (!isLeaf.value) doExpand()\n  })\n}\n\nconst handleHoverExpand = (e: Event) => {\n  if (!isHoverMenu.value) return\n  handleExpand()\n  !isLeaf.value && emit('expand', e)\n}\n\nconst handleExpand = () => {\n  const { node } = props\n  // do not exclude leaf node because the menus expanded might have to reset\n  if (!expandable.value || node.loading) return\n  node.loaded ? doExpand() : doLoad()\n}\n\nconst handleClick = () => {\n  if (isHoverMenu.value && !isLeaf.value) return\n\n  if (\n    isLeaf.value &&\n    !isDisabled.value &&\n    !checkStrictly.value &&\n    !multiple.value\n  ) {\n    handleCheck(true)\n  } else {\n    handleExpand()\n  }\n}\n\nconst handleSelectCheck = (checked: CheckboxValueType | undefined) => {\n  if (checkStrictly.value) {\n    doCheck(checked as boolean)\n    if (props.node.loaded) {\n      doExpand()\n    }\n  } else {\n    handleCheck(checked as boolean)\n  }\n}\n\nconst handleCheck = (checked: boolean) => {\n  if (!props.node.loaded) {\n    doLoad()\n  } else {\n    doCheck(checked)\n    !checkStrictly.value && doExpand()\n  }\n}\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}