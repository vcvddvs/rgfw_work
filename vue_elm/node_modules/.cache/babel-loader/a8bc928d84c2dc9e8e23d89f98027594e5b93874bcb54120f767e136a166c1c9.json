{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted, computed } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { orderApi } from '../utils/api';\nimport { businessApi } from '../utils/api'; // Added import for businessApi\nimport { ElMessage } from 'element-plus'; // Added ElMessage import\n\nconst baseURL = 'http://localhost:8090'; // API网关地址\n\nexport default {\n  __name: 'historyComponent',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const router = useRouter();\n    const orders = ref([]);\n    const activeTab = ref('all');\n    onMounted(() => {\n      fetchOrders();\n    });\n    const goBack = () => {\n      router.push('/Index-Component');\n    };\n    const setActiveTab = tab => {\n      activeTab.value = tab;\n      // 切换标签时滚动到顶部\n      window.scrollTo(0, 0);\n    };\n\n    // 将逗号分隔的字符串转换为数组\n    const getArrayFromString = str => {\n      if (!str) return [];\n      try {\n        // 检查是否是单个Base64编码字符串（通常很长）\n        if (typeof str === 'string' && str.length > 100) {\n          // 如果是Base64编码或包含Base64特征，作为单个元素返回\n          if (str.startsWith('data:image') || str.startsWith('iVBOR') || /^[A-Za-z0-9+/=]+$/.test(str.substring(0, 20))) {\n            return [str];\n          }\n        }\n\n        // 如果字符串中包含Base64编码的图片数据，不要在逗号处分割\n        if (typeof str === 'string' && (str.includes('data:image/png;base64,') || str.includes('data:image/jpeg;base64,') || str.includes('iVBORw0KGgo'))) {\n          // 检查是否有多个Base64编码图片（非常罕见的情况）\n          if (str.indexOf('data:image', str.indexOf('data:image') + 10) > 0) {\n            // 有多个Base64图片，尝试分割它们\n            const parts = [];\n            let startIndex = 0;\n            let searchIndex = 0;\n            while ((searchIndex = str.indexOf('data:image', startIndex)) >= 0) {\n              if (startIndex > 0 && searchIndex > startIndex) {\n                parts.push(str.substring(startIndex, searchIndex));\n              }\n              startIndex = searchIndex;\n\n              // 寻找下一个图片开始或字符串结束\n              const nextImgIndex = str.indexOf('data:image', startIndex + 10);\n              if (nextImgIndex > 0) {\n                parts.push(str.substring(startIndex, nextImgIndex));\n                startIndex = nextImgIndex;\n              } else {\n                // 最后一个图片\n                parts.push(str.substring(startIndex));\n                break;\n              }\n            }\n            return parts.filter(p => p);\n          }\n\n          // 单个Base64图片，作为单个元素返回\n          return [str];\n        }\n\n        // 处理普通的逗号分隔字符串\n        return str.split(',').map(item => item.trim());\n      } catch (error) {\n        console.error('分割字符串出错:', error);\n        return [str]; // 出错时返回原始字符串作为单个元素\n      }\n    };\n\n    // 处理图片URL\n    const getImageUrl = imgPath => {\n      if (!imgPath) {\n        return require('@/assets/img/BUSINESS/img.png');\n      }\n      try {\n        // 如果是Base64编码的图片数据\n        if (typeof imgPath === 'string' && imgPath.length > 100) {\n          return sanitizeBase64(imgPath);\n        }\n\n        // 如果是完整URL，直接返回\n        if (imgPath.startsWith('http')) {\n          return imgPath;\n        }\n\n        // 如果是以/assets开头的路径，转换为正确的路径\n        if (imgPath.startsWith('/assets/')) {\n          // 去掉开头的/assets/，因为在项目中assets是相对路径\n          const relativePath = imgPath.replace('/assets/', '');\n          try {\n            return require(`@/assets/${relativePath}`);\n          } catch (e) {\n            // 尝试通过API网关获取\n            return baseURL + imgPath;\n          }\n        }\n\n        // 如果是相对路径，添加baseURL\n        if (imgPath.startsWith('/')) {\n          return baseURL + imgPath;\n        }\n\n        // 尝试加载项目中的图片\n        try {\n          // 首先尝试从BUSINESS目录加载\n          if (!imgPath.includes('/')) {\n            try {\n              return require('@/assets/img/BUSINESS/' + imgPath);\n            } catch (e) {\n              // 尝试从其他目录加载\n            }\n          }\n\n          // 然后尝试从普通img目录加载\n          return require('@/assets/img/' + imgPath);\n        } catch (e) {\n          return require('@/assets/img/BUSINESS/img.png');\n        }\n      } catch (error) {\n        console.error('处理图片URL出错:', error);\n        return require('@/assets/img/BUSINESS/img.png');\n      }\n    };\n\n    // 处理和验证Base64编码的图片\n    const sanitizeBase64 = base64String => {\n      try {\n        // 已经是完整的Base64字符串\n        if (base64String.startsWith('data:image/')) {\n          return base64String;\n        }\n\n        // 检查是否是PNG的Base64编码\n        if (base64String.startsWith('iVBOR')) {\n          return `data:image/png;base64,${base64String}`;\n        }\n\n        // 检查是否是JPEG的Base64编码\n        if (base64String.startsWith('/9j/')) {\n          return `data:image/jpeg;base64,${base64String}`;\n        }\n\n        // 检查是否包含无效字符\n        if (!/^[A-Za-z0-9+/=]+$/.test(base64String.replace(/\\s/g, ''))) {\n          console.warn('Base64字符串包含无效字符');\n          return '';\n        }\n\n        // 检查长度是否合理（Base64编码的图片通常很长）\n        if (base64String.length < 100) {\n          console.warn('Base64字符串长度不足');\n          return '';\n        }\n\n        // 默认作为PNG处理\n        return `data:image/png;base64,${base64String.replace(/\\s/g, '')}`;\n      } catch (error) {\n        console.error('处理Base64字符串出错:', error);\n        return '';\n      }\n    };\n\n    // 处理图片加载错误\n    const handleImageError = (e, type) => {\n      console.error(`图片加载失败: ${e.target.src.substring(0, 50)}...`);\n      try {\n        // 检查是否是Base64编码的图片加载失败\n        const src = e.target.src;\n        if (src && src.startsWith('data:image')) {\n          console.log('尝试修复Base64图片...');\n\n          // 提取Base64部分\n          const base64Data = src.split(',')[1];\n          if (base64Data) {\n            // 尝试使用不同的MIME类型\n            if (src.includes('image/png')) {\n              e.target.src = `data:image/jpeg;base64,${base64Data}`;\n              return;\n            } else if (src.includes('image/jpeg')) {\n              e.target.src = `data:image/png;base64,${base64Data}`;\n              return;\n            }\n          }\n        }\n      } catch (error) {\n        console.error('处理图片错误时出错:', error);\n      }\n\n      // 使用默认图片\n      if (type === 'business') {\n        e.target.src = require('@/assets/img/BUSINESS/img.png');\n      } else {\n        e.target.src = require('@/assets/img/sp01.png');\n      }\n    };\n\n    // 再次下单\n    const reorder = order => {\n      // 实现再次下单功能\n      router.push(`/business-component/${order.businessId}`);\n    };\n\n    // 前往评价页面\n    const goToRating = order => {\n      console.log('Order object:', order);\n\n      // 确保businessId存在且为有效值\n      const businessId = order.businessId || order.business?.businessId || '1';\n\n      // 如果商家图片为空，尝试再次获取\n      if (!order.businessImg && businessId) {\n        businessApi.getBusinessById(businessId).then(businessInfo => {\n          if (businessInfo && businessInfo.businessImg) {\n            navigateToRating(order, businessInfo.businessImg);\n          } else {\n            navigateToRating(order);\n          }\n        }).catch(error => {\n          console.error('获取商家信息失败:', error);\n          navigateToRating(order);\n        });\n      } else {\n        navigateToRating(order);\n      }\n    };\n\n    // 导航到评价页面\n    const navigateToRating = (order, businessImg = null) => {\n      router.push({\n        name: 'Rating',\n        params: {\n          orderId: order.orderId || '1',\n          businessId: order.businessId || order.business?.businessId || '1',\n          businessName: order.businessName || '未知商家'\n        },\n        query: {\n          businessImg: businessImg || order.businessImg || '',\n          orderDate: order.orderDate || ''\n        }\n      });\n    };\n\n    // 检查订单是否已评价\n    const isOrderRated = orderId => {\n      try {\n        // 检查本地存储中是否有该订单的评价\n        const ratingsString = localStorage.getItem('localRatings');\n        console.log(`检查订单 ${orderId} 是否已评价, 本地存储:`, ratingsString);\n        if (ratingsString) {\n          const ratings = JSON.parse(ratingsString);\n          console.log('解析后的本地评价:', ratings);\n\n          // 确保使用数字类型进行比较\n          const isRated = ratings.some(r => r.orderId === Number(orderId));\n          console.log(`订单 ${orderId} 已评价状态:`, isRated);\n          return isRated;\n        }\n      } catch (error) {\n        console.error('检查订单评价状态失败:', error);\n      }\n      return false;\n    };\n    const fetchOrders = async () => {\n      try {\n        const response = await orderApi.getOrderHistory();\n        console.log('订单历史原始响应:', response);\n        if (response && Array.isArray(response)) {\n          orders.value = response;\n        } else if (response && response.data && Array.isArray(response.data)) {\n          orders.value = response.data;\n        } else if (response && typeof response === 'object') {\n          // 尝试从响应中提取数据\n          console.log('尝试从响应中提取订单数据:', response);\n          const possibleOrderArrays = [response.data, response.result, response.content, response.records, response.list, response.orders];\n          for (const arr of possibleOrderArrays) {\n            if (arr && Array.isArray(arr)) {\n              console.log('找到订单数组:', arr);\n              orders.value = arr;\n              break;\n            }\n          }\n        }\n\n        // 详细记录每个订单的图片信息\n        console.log('订单数据处理前:', JSON.stringify(orders.value.map(order => ({\n          orderId: order.orderId,\n          businessImg: order.businessImg ? order.businessImg.substring(0, 30) + '...' : 'null',\n          businessImgType: order.businessImg ? typeof order.businessImg : 'null',\n          hasBusinessImg: !!order.businessImg,\n          foodImgs: order.foodImgs ? order.foodImgs.substring(0, 30) + '...' : 'null',\n          // 添加更多详细的食品图片信息\n          foodImgsArray: getArrayFromString(order.foodImgs),\n          foodImgsFirstItem: getArrayFromString(order.foodImgs)[0] ? getArrayFromString(order.foodImgs)[0].substring(0, 30) + '...' : 'null'\n        }))));\n\n        // 确保每个订单对象都有必要的属性\n        orders.value = orders.value.map(order => {\n          // 使用数据库中存储的商家名称和图片\n          const businessName = order.businessName || order.business?.businessName || '未知商家';\n          const businessImg = order.businessImg || order.business?.businessImg || '';\n          console.log(`订单 ${order.orderId} 的商家图片:`, businessImg ? businessImg.substring(0, 30) + '...' : 'null', '类型:', typeof businessImg);\n\n          // 检查是否有订单详情中的食品图片\n          if (order.orderDetailList && Array.isArray(order.orderDetailList)) {\n            console.log(`订单 ${order.orderId} 的食品图片:`, order.orderDetailList.map(detail => ({\n              foodId: detail.foodId,\n              foodImg: detail.foodImg ? detail.foodImg.substring(0, 30) + '...' : 'null'\n            })));\n          }\n\n          // 打印foodImgs字段的详细信息\n          if (order.foodImgs) {\n            console.log(`订单 ${order.orderId} 的foodImgs字段:`, order.foodImgs);\n            const foodImgsArray = getArrayFromString(order.foodImgs);\n            console.log(`订单 ${order.orderId} 的foodImgs数组:`, foodImgsArray);\n\n            // 检查每个食品图片URL\n            foodImgsArray.forEach((imgUrl, index) => {\n              console.log(`食品图片 ${index}:`, imgUrl);\n              console.log(`处理后的图片URL:`, getImageUrl(imgUrl));\n            });\n          }\n          return {\n            ...order,\n            businessId: order.businessId || order.business?.businessId || '1',\n            businessName: businessName,\n            businessImg: businessImg,\n            orderDate: order.orderDate || new Date(order.orderTime || Date.now()).toLocaleString()\n          };\n        });\n        console.log('处理后的订单数据:', orders.value);\n\n        // 不再需要为每个订单获取商家信息，因为数据库中已经存储了商家名称和图片\n      } catch (error) {\n        console.error('获取订单历史失败:', error);\n\n        // 如果API调用失败，尝试从本地存储获取订单信息\n        const localOrderInfo = localStorage.getItem('orderInfo');\n        if (localOrderInfo) {\n          try {\n            const orderInfo = JSON.parse(localOrderInfo);\n            console.log('使用本地存储的订单信息:', orderInfo);\n\n            // 创建模拟订单数据\n            const mockOrder = {\n              orderId: new Date().getTime(),\n              businessId: orderInfo.businessId,\n              businessName: orderInfo.businessName,\n              businessImg: orderInfo.businessImg,\n              orderDate: orderInfo.orderDate || new Date().toLocaleString(),\n              orderTotal: orderInfo.orderTotal || 0,\n              orderState: 5,\n              // 已完成/待评价\n              foodNames: orderInfo.items?.map(item => item.foodName).join(','),\n              foodImgs: orderInfo.items?.map(item => item.foodImg).join(','),\n              quantities: orderInfo.items?.map(item => item.quantity).join(',')\n            };\n\n            // 使用模拟数据\n            orders.value = [mockOrder];\n\n            // 显示提示\n            ElMessage({\n              message: 'API服务不可用，显示本地存储的订单信息',\n              type: 'warning',\n              duration: 3000\n            });\n          } catch (e) {\n            console.error('解析本地订单信息失败:', e);\n\n            // 使用硬编码的模拟数据\n            useMockData();\n          }\n        } else {\n          // 如果本地存储中没有订单信息，使用硬编码的模拟数据\n          useMockData();\n        }\n      }\n    };\n\n    // 使用硬编码的模拟数据\n    const useMockData = () => {\n      console.log('使用硬编码的模拟订单数据');\n\n      // 创建模拟订单数据\n      const mockOrders = [{\n        orderId: 1,\n        businessId: 1,\n        businessName: '万家饺子（软件园E18店）',\n        businessImg: '/assets/img/BUSINESS/img.png',\n        orderDate: new Date().toLocaleString(),\n        orderTotal: 31,\n        orderState: 5,\n        foodNames: '纯肉鲜肉,玉米鲜肉',\n        foodImgs: '/assets/img/sp01.png,/assets/img/sp01.png',\n        quantities: '1,1'\n      }, {\n        orderId: 2,\n        businessId: 2,\n        businessName: '肯德基麦当劳',\n        businessImg: '/assets/img/BUSINESS/img.png',\n        orderDate: new Date(Date.now() - 86400000).toLocaleString(),\n        // 昨天\n        orderTotal: 45,\n        orderState: 5,\n        foodNames: '汉堡,薯条,可乐',\n        foodImgs: '/assets/img/sp01.png,/assets/img/sp01.png,/assets/img/sp01.png',\n        quantities: '1,1,1'\n      }];\n\n      // 使用模拟数据\n      orders.value = mockOrders;\n\n      // 显示提示\n      ElMessage({\n        message: 'API服务不可用，显示模拟订单数据',\n        type: 'warning',\n        duration: 3000\n      });\n    };\n\n    // 根据选中的标签筛选订单\n    const filteredOrders = computed(() => {\n      if (activeTab.value === 'all') {\n        return orders.value;\n      } else if (activeTab.value === 'inProgress') {\n        // 订单状态：1-已下单/待付款，2-已付款/待接单，3-已接单/配送中\n        return orders.value.filter(order => [1, 2, 3].includes(order.orderState));\n      } else if (activeTab.value === 'toRate') {\n        // 订单状态：5-已完成/待评价\n        return orders.value.filter(order => order.orderState === 5);\n      } else if (activeTab.value === 'refund') {\n        // 订单状态：6-已退款\n        return orders.value.filter(order => order.orderState === 6);\n      }\n      return orders.value;\n    });\n\n    // 获取食品图片的辅助函数\n    const getFoodImage = (order, index) => {\n      try {\n        // 获取食品图片数组\n        const foodImgs = getArrayFromString(order.foodImgs);\n        console.log(`获取订单 ${order.orderId} 的第 ${index} 个食品图片, 图片数组长度: ${foodImgs.length}`);\n\n        // 检查索引是否有效\n        if (index >= 0 && index < foodImgs.length) {\n          const imgPath = foodImgs[index];\n          console.log(`食品图片路径: ${imgPath ? imgPath.length > 50 ? imgPath.substring(0, 50) + '...' : imgPath : 'null'}`);\n\n          // 检查是否是Base64编码\n          if (imgPath && imgPath.length > 100) {\n            return sanitizeBase64(imgPath);\n          }\n\n          // 处理普通图片URL\n          console.log('使用getImageUrl处理普通图片URL');\n          return getImageUrl(imgPath);\n        }\n\n        // 如果索引无效，返回默认图片\n        console.log('索引无效，返回默认图片');\n        return ''; // 返回空字符串表示没有图片\n      } catch (error) {\n        console.error('获取食品图片出错:', error, error.stack);\n        return ''; // 返回空字符串表示没有图片\n      }\n    };\n\n    // 获取食品数量的辅助函数\n    const getFoodQuantity = (order, index) => {\n      try {\n        // 获取数量数组\n        const quantities = getArrayFromString(order.quantities);\n\n        // 检查索引是否有效\n        if (index >= 0 && index < quantities.length) {\n          return quantities[index] || '1';\n        }\n\n        // 如果索引无效，返回默认值\n        return '1';\n      } catch (error) {\n        console.error('获取食品数量出错:', error);\n        return '1';\n      }\n    };\n    const __returned__ = {\n      router,\n      orders,\n      activeTab,\n      baseURL,\n      goBack,\n      setActiveTab,\n      getArrayFromString,\n      getImageUrl,\n      sanitizeBase64,\n      handleImageError,\n      reorder,\n      goToRating,\n      navigateToRating,\n      isOrderRated,\n      fetchOrders,\n      useMockData,\n      filteredOrders,\n      getFoodImage,\n      getFoodQuantity,\n      ref,\n      onMounted,\n      computed,\n      get useRouter() {\n        return useRouter;\n      },\n      get orderApi() {\n        return orderApi;\n      },\n      get businessApi() {\n        return businessApi;\n      },\n      get ElMessage() {\n        return ElMessage;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","useRouter","orderApi","businessApi","ElMessage","baseURL","router","orders","activeTab","fetchOrders","goBack","push","setActiveTab","tab","value","window","scrollTo","getArrayFromString","str","length","startsWith","test","substring","includes","indexOf","parts","startIndex","searchIndex","nextImgIndex","filter","p","split","map","item","trim","error","console","getImageUrl","imgPath","require","sanitizeBase64","relativePath","replace","e","base64String","warn","handleImageError","type","target","src","log","base64Data","reorder","order","businessId","goToRating","business","businessImg","getBusinessById","then","businessInfo","navigateToRating","catch","name","params","orderId","businessName","query","orderDate","isOrderRated","ratingsString","localStorage","getItem","ratings","JSON","parse","isRated","some","r","Number","response","getOrderHistory","Array","isArray","data","possibleOrderArrays","result","content","records","list","arr","stringify","businessImgType","hasBusinessImg","foodImgs","foodImgsArray","foodImgsFirstItem","orderDetailList","detail","foodId","foodImg","forEach","imgUrl","index","Date","orderTime","now","toLocaleString","localOrderInfo","orderInfo","mockOrder","getTime","orderTotal","orderState","foodNames","items","foodName","join","quantities","quantity","message","duration","useMockData","mockOrders","filteredOrders","getFoodImage","stack","getFoodQuantity"],"sources":["D:/back_elm/vue_elm/src/components/historyComponent.vue"],"sourcesContent":["<template>\n  <div class=\"wrapper\">\n    <div class=\"header\">\n      <div class=\"search\">\n        <div class=\"search-bottom\">\n          <div class=\"back\">\n            <span class=\"iconfont icon-back\" @click=\"goBack\"></span>\n          </div>\n          <div class=\"search-pt\">\n            <span class=\"iconfont icon-sousuo\" style=\"margin-left: 2vw\"></span>\n            <input style=\"flex:6;\" type=\"text\" placeholder=\"历史信息搜索\"/>\n          </div>\n          <div class=\"box\">\n            <span class=\"iconfont icon-gongjuxiang\"></span>\n            <span class=\"iconfont icon-24gf-ellipsis\"></span>\n          </div>\n        </div>\n        <div class=\"information\">\n          <p :class=\"{ active: activeTab === 'all' }\" @click=\"setActiveTab('all')\">全部</p>\n          <p :class=\"{ active: activeTab === 'inProgress' }\" @click=\"setActiveTab('inProgress')\">进行中</p>\n          <p :class=\"{ active: activeTab === 'toRate' }\" @click=\"setActiveTab('toRate')\">待评价</p>\n          <p :class=\"{ active: activeTab === 'refund' }\" @click=\"setActiveTab('refund')\">退款</p>\n        </div>\n      </div>\n    </div>\n    <div class=\"body\">\n      <div v-for=\"order in filteredOrders\" :key=\"order.orderId\" class=\"order-card\">\n        <!-- 订单头部：商家信息和订单总价 -->\n        <div class=\"order-header\">\n          <div class=\"business-info\">\n            <img :src=\"getImageUrl(order.businessImg)\" @error=\"handleImageError($event, 'business')\" class=\"business-img\"/>\n            <div class=\"business-details\">\n              <div class=\"business-name\">{{ order.businessName }}</div>\n              <div class=\"delivery-price\">{{ order.deliveryPrice }}元无门槛</div>\n            </div>\n          </div>\n          <div class=\"order-price\">&#165;{{ order.orderTotal }}</div>\n        </div>\n        \n        <!-- 订单内容：食品列表 -->\n        <div class=\"order-content\">\n          <div class=\"food-list\">\n            <div v-for=\"(foodName, index) in getArrayFromString(order.foodNames)\" :key=\"index\" class=\"food-item\">\n              <div class=\"food-left\">\n                <img \n                  :src=\"getFoodImage(order, index)\" \n                  @error=\"handleImageError($event, 'food')\" \n                  class=\"food-img\"\n                  alt=\"食品图片\"\n                  loading=\"lazy\"\n                  v-if=\"getFoodImage(order, index) !== ''\"\n                />\n                <div v-else class=\"food-img-placeholder\">\n                  <img :src=\"require('@/assets/img/sp01.png')\" class=\"food-img\" alt=\"默认食品图片\" />\n                </div>\n              </div>\n              <div class=\"food-right\">\n                <div class=\"food-name\">{{ foodName || '未知食品' }}</div>\n                <div class=\"food-quantity\">x{{ getFoodQuantity(order, index) }}</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <!-- 订单底部：订单时间和操作按钮 -->\n        <div class=\"order-footer\">\n          <div class=\"order-date\">{{ order.orderDate }}</div>\n          <div class=\"order-actions\">\n            <button class=\"reorder-btn\" @click=\"reorder(order)\">再来一单</button>\n            <button \n              v-if=\"isOrderRated(order.orderId)\" \n              class=\"rated-btn\" \n              @click=\"goToRating(order)\"\n            >\n              修改评价\n            </button>\n            <button \n              v-else \n              class=\"rating-btn\" \n              @click=\"goToRating(order)\"\n            >\n              评价订单\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted, computed } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { orderApi } from '../utils/api';\nimport { businessApi } from '../utils/api'; // Added import for businessApi\nimport { ElMessage } from 'element-plus'; // Added ElMessage import\n\nconst router = useRouter();\nconst orders = ref([]);\nconst activeTab = ref('all');\nconst baseURL = 'http://localhost:8090'; // API网关地址\n\nonMounted(() => {\n  fetchOrders();\n});\n\nconst goBack = () => {\n  router.push('/Index-Component');\n};\n\nconst setActiveTab = (tab) => {\n  activeTab.value = tab;\n  // 切换标签时滚动到顶部\n  window.scrollTo(0, 0);\n};\n\n// 将逗号分隔的字符串转换为数组\nconst getArrayFromString = (str) => {\n  if (!str) return [];\n  \n  try {\n    // 检查是否是单个Base64编码字符串（通常很长）\n    if (typeof str === 'string' && str.length > 100) {\n      // 如果是Base64编码或包含Base64特征，作为单个元素返回\n      if (str.startsWith('data:image') || \n          str.startsWith('iVBOR') || \n          /^[A-Za-z0-9+/=]+$/.test(str.substring(0, 20))) {\n        return [str];\n      }\n    }\n    \n    // 如果字符串中包含Base64编码的图片数据，不要在逗号处分割\n    if (typeof str === 'string' && (\n        str.includes('data:image/png;base64,') || \n        str.includes('data:image/jpeg;base64,') ||\n        str.includes('iVBORw0KGgo'))) {\n      \n      // 检查是否有多个Base64编码图片（非常罕见的情况）\n      if (str.indexOf('data:image', str.indexOf('data:image') + 10) > 0) {\n        // 有多个Base64图片，尝试分割它们\n        const parts = [];\n        let startIndex = 0;\n        let searchIndex = 0;\n        \n        while ((searchIndex = str.indexOf('data:image', startIndex)) >= 0) {\n          if (startIndex > 0 && searchIndex > startIndex) {\n            parts.push(str.substring(startIndex, searchIndex));\n          }\n          startIndex = searchIndex;\n          \n          // 寻找下一个图片开始或字符串结束\n          const nextImgIndex = str.indexOf('data:image', startIndex + 10);\n          if (nextImgIndex > 0) {\n            parts.push(str.substring(startIndex, nextImgIndex));\n            startIndex = nextImgIndex;\n          } else {\n            // 最后一个图片\n            parts.push(str.substring(startIndex));\n            break;\n          }\n        }\n        \n        return parts.filter(p => p);\n      }\n      \n      // 单个Base64图片，作为单个元素返回\n      return [str];\n    }\n    \n    // 处理普通的逗号分隔字符串\n    return str.split(',').map(item => item.trim());\n  } catch (error) {\n    console.error('分割字符串出错:', error);\n    return [str]; // 出错时返回原始字符串作为单个元素\n  }\n};\n\n// 处理图片URL\nconst getImageUrl = (imgPath) => {\n  if (!imgPath) {\n    return require('@/assets/img/BUSINESS/img.png');\n  }\n  \n  try {\n    // 如果是Base64编码的图片数据\n    if (typeof imgPath === 'string' && imgPath.length > 100) {\n      return sanitizeBase64(imgPath);\n    }\n    \n    // 如果是完整URL，直接返回\n    if (imgPath.startsWith('http')) {\n      return imgPath;\n    }\n    \n    // 如果是以/assets开头的路径，转换为正确的路径\n    if (imgPath.startsWith('/assets/')) {\n      // 去掉开头的/assets/，因为在项目中assets是相对路径\n      const relativePath = imgPath.replace('/assets/', '');\n      try {\n        return require(`@/assets/${relativePath}`);\n      } catch (e) {\n        // 尝试通过API网关获取\n        return baseURL + imgPath;\n      }\n    }\n    \n    // 如果是相对路径，添加baseURL\n    if (imgPath.startsWith('/')) {\n      return baseURL + imgPath;\n    }\n    \n    // 尝试加载项目中的图片\n    try {\n      // 首先尝试从BUSINESS目录加载\n      if (!imgPath.includes('/')) {\n        try {\n          return require('@/assets/img/BUSINESS/' + imgPath);\n        } catch (e) {\n          // 尝试从其他目录加载\n        }\n      }\n      \n      // 然后尝试从普通img目录加载\n      return require('@/assets/img/' + imgPath);\n    } catch (e) {\n      return require('@/assets/img/BUSINESS/img.png');\n    }\n  } catch (error) {\n    console.error('处理图片URL出错:', error);\n    return require('@/assets/img/BUSINESS/img.png');\n  }\n};\n\n// 处理和验证Base64编码的图片\nconst sanitizeBase64 = (base64String) => {\n  try {\n    // 已经是完整的Base64字符串\n    if (base64String.startsWith('data:image/')) {\n      return base64String;\n    }\n    \n    // 检查是否是PNG的Base64编码\n    if (base64String.startsWith('iVBOR')) {\n      return `data:image/png;base64,${base64String}`;\n    }\n    \n    // 检查是否是JPEG的Base64编码\n    if (base64String.startsWith('/9j/')) {\n      return `data:image/jpeg;base64,${base64String}`;\n    }\n    \n    // 检查是否包含无效字符\n    if (!/^[A-Za-z0-9+/=]+$/.test(base64String.replace(/\\s/g, ''))) {\n      console.warn('Base64字符串包含无效字符');\n      return '';\n    }\n    \n    // 检查长度是否合理（Base64编码的图片通常很长）\n    if (base64String.length < 100) {\n      console.warn('Base64字符串长度不足');\n      return '';\n    }\n    \n    // 默认作为PNG处理\n    return `data:image/png;base64,${base64String.replace(/\\s/g, '')}`;\n  } catch (error) {\n    console.error('处理Base64字符串出错:', error);\n    return '';\n  }\n};\n\n// 处理图片加载错误\nconst handleImageError = (e, type) => {\n  console.error(`图片加载失败: ${e.target.src.substring(0, 50)}...`);\n  \n  try {\n    // 检查是否是Base64编码的图片加载失败\n    const src = e.target.src;\n    if (src && src.startsWith('data:image')) {\n      console.log('尝试修复Base64图片...');\n      \n      // 提取Base64部分\n      const base64Data = src.split(',')[1];\n      if (base64Data) {\n        // 尝试使用不同的MIME类型\n        if (src.includes('image/png')) {\n          e.target.src = `data:image/jpeg;base64,${base64Data}`;\n          return;\n        } else if (src.includes('image/jpeg')) {\n          e.target.src = `data:image/png;base64,${base64Data}`;\n          return;\n        }\n      }\n    }\n  } catch (error) {\n    console.error('处理图片错误时出错:', error);\n  }\n  \n  // 使用默认图片\n  if (type === 'business') {\n    e.target.src = require('@/assets/img/BUSINESS/img.png');\n  } else {\n    e.target.src = require('@/assets/img/sp01.png');\n  }\n};\n\n// 再次下单\nconst reorder = (order) => {\n  // 实现再次下单功能\n  router.push(`/business-component/${order.businessId}`);\n};\n\n// 前往评价页面\nconst goToRating = (order) => {\n  console.log('Order object:', order);\n  \n  // 确保businessId存在且为有效值\n  const businessId = order.businessId || order.business?.businessId || '1';\n  \n  // 如果商家图片为空，尝试再次获取\n  if (!order.businessImg && businessId) {\n    businessApi.getBusinessById(businessId)\n      .then(businessInfo => {\n        if (businessInfo && businessInfo.businessImg) {\n          navigateToRating(order, businessInfo.businessImg);\n        } else {\n          navigateToRating(order);\n        }\n      })\n      .catch(error => {\n        console.error('获取商家信息失败:', error);\n        navigateToRating(order);\n      });\n  } else {\n    navigateToRating(order);\n  }\n};\n\n// 导航到评价页面\nconst navigateToRating = (order, businessImg = null) => {\n  router.push({\n    name: 'Rating',\n    params: {\n      orderId: order.orderId || '1',\n      businessId: order.businessId || order.business?.businessId || '1',\n      businessName: order.businessName || '未知商家'\n    },\n    query: {\n      businessImg: businessImg || order.businessImg || '',\n      orderDate: order.orderDate || ''\n    }\n  });\n};\n\n// 检查订单是否已评价\nconst isOrderRated = (orderId) => {\n  try {\n    // 检查本地存储中是否有该订单的评价\n    const ratingsString = localStorage.getItem('localRatings');\n    console.log(`检查订单 ${orderId} 是否已评价, 本地存储:`, ratingsString);\n    \n    if (ratingsString) {\n      const ratings = JSON.parse(ratingsString);\n      console.log('解析后的本地评价:', ratings);\n      \n      // 确保使用数字类型进行比较\n      const isRated = ratings.some(r => r.orderId === Number(orderId));\n      console.log(`订单 ${orderId} 已评价状态:`, isRated);\n      return isRated;\n    }\n  } catch (error) {\n    console.error('检查订单评价状态失败:', error);\n  }\n  return false;\n};\n\nconst fetchOrders = async () => {\n  try {\n    const response = await orderApi.getOrderHistory();\n    console.log('订单历史原始响应:', response);\n    \n    if (response && Array.isArray(response)) {\n      orders.value = response;\n    } else if (response && response.data && Array.isArray(response.data)) {\n      orders.value = response.data;\n    } else if (response && typeof response === 'object') {\n      // 尝试从响应中提取数据\n      console.log('尝试从响应中提取订单数据:', response);\n      const possibleOrderArrays = [\n        response.data,\n        response.result,\n        response.content,\n        response.records,\n        response.list,\n        response.orders\n      ];\n      \n      for (const arr of possibleOrderArrays) {\n        if (arr && Array.isArray(arr)) {\n          console.log('找到订单数组:', arr);\n          orders.value = arr;\n          break;\n        }\n      }\n    }\n    \n    // 详细记录每个订单的图片信息\n    console.log('订单数据处理前:', JSON.stringify(orders.value.map(order => ({\n      orderId: order.orderId,\n      businessImg: order.businessImg ? order.businessImg.substring(0, 30) + '...' : 'null',\n      businessImgType: order.businessImg ? typeof order.businessImg : 'null',\n      hasBusinessImg: !!order.businessImg,\n      foodImgs: order.foodImgs ? order.foodImgs.substring(0, 30) + '...' : 'null',\n      // 添加更多详细的食品图片信息\n      foodImgsArray: getArrayFromString(order.foodImgs),\n      foodImgsFirstItem: getArrayFromString(order.foodImgs)[0] ? getArrayFromString(order.foodImgs)[0].substring(0, 30) + '...' : 'null'\n    }))));\n    \n    // 确保每个订单对象都有必要的属性\n    orders.value = orders.value.map(order => {\n      // 使用数据库中存储的商家名称和图片\n      const businessName = order.businessName || order.business?.businessName || '未知商家';\n      const businessImg = order.businessImg || order.business?.businessImg || '';\n      \n      console.log(`订单 ${order.orderId} 的商家图片:`, \n        businessImg ? businessImg.substring(0, 30) + '...' : 'null',\n        '类型:', typeof businessImg);\n      \n      // 检查是否有订单详情中的食品图片\n      if (order.orderDetailList && Array.isArray(order.orderDetailList)) {\n        console.log(`订单 ${order.orderId} 的食品图片:`, \n          order.orderDetailList.map(detail => ({\n            foodId: detail.foodId,\n            foodImg: detail.foodImg ? detail.foodImg.substring(0, 30) + '...' : 'null'\n          })));\n      }\n      \n      // 打印foodImgs字段的详细信息\n      if (order.foodImgs) {\n        console.log(`订单 ${order.orderId} 的foodImgs字段:`, order.foodImgs);\n        const foodImgsArray = getArrayFromString(order.foodImgs);\n        console.log(`订单 ${order.orderId} 的foodImgs数组:`, foodImgsArray);\n        \n        // 检查每个食品图片URL\n        foodImgsArray.forEach((imgUrl, index) => {\n          console.log(`食品图片 ${index}:`, imgUrl);\n          console.log(`处理后的图片URL:`, getImageUrl(imgUrl));\n        });\n      }\n      \n      return {\n        ...order,\n        businessId: order.businessId || order.business?.businessId || '1',\n        businessName: businessName,\n        businessImg: businessImg,\n        orderDate: order.orderDate || new Date(order.orderTime || Date.now()).toLocaleString()\n      };\n    });\n    \n    console.log('处理后的订单数据:', orders.value);\n    \n    // 不再需要为每个订单获取商家信息，因为数据库中已经存储了商家名称和图片\n  } catch (error) {\n    console.error('获取订单历史失败:', error);\n    \n    // 如果API调用失败，尝试从本地存储获取订单信息\n    const localOrderInfo = localStorage.getItem('orderInfo');\n    if (localOrderInfo) {\n      try {\n        const orderInfo = JSON.parse(localOrderInfo);\n        console.log('使用本地存储的订单信息:', orderInfo);\n        \n        // 创建模拟订单数据\n        const mockOrder = {\n          orderId: new Date().getTime(),\n          businessId: orderInfo.businessId,\n          businessName: orderInfo.businessName,\n          businessImg: orderInfo.businessImg,\n          orderDate: orderInfo.orderDate || new Date().toLocaleString(),\n          orderTotal: orderInfo.orderTotal || 0,\n          orderState: 5, // 已完成/待评价\n          foodNames: orderInfo.items?.map(item => item.foodName).join(','),\n          foodImgs: orderInfo.items?.map(item => item.foodImg).join(','),\n          quantities: orderInfo.items?.map(item => item.quantity).join(',')\n        };\n        \n        // 使用模拟数据\n        orders.value = [mockOrder];\n        \n        // 显示提示\n        ElMessage({\n          message: 'API服务不可用，显示本地存储的订单信息',\n          type: 'warning',\n          duration: 3000\n        });\n      } catch (e) {\n        console.error('解析本地订单信息失败:', e);\n        \n        // 使用硬编码的模拟数据\n        useMockData();\n      }\n    } else {\n      // 如果本地存储中没有订单信息，使用硬编码的模拟数据\n      useMockData();\n    }\n  }\n};\n\n// 使用硬编码的模拟数据\nconst useMockData = () => {\n  console.log('使用硬编码的模拟订单数据');\n  \n  // 创建模拟订单数据\n  const mockOrders = [\n    {\n      orderId: 1,\n      businessId: 1,\n      businessName: '万家饺子（软件园E18店）',\n      businessImg: '/assets/img/BUSINESS/img.png',\n      orderDate: new Date().toLocaleString(),\n      orderTotal: 31,\n      orderState: 5,\n      foodNames: '纯肉鲜肉,玉米鲜肉',\n      foodImgs: '/assets/img/sp01.png,/assets/img/sp01.png',\n      quantities: '1,1'\n    },\n    {\n      orderId: 2,\n      businessId: 2,\n      businessName: '肯德基麦当劳',\n      businessImg: '/assets/img/BUSINESS/img.png',\n      orderDate: new Date(Date.now() - 86400000).toLocaleString(), // 昨天\n      orderTotal: 45,\n      orderState: 5,\n      foodNames: '汉堡,薯条,可乐',\n      foodImgs: '/assets/img/sp01.png,/assets/img/sp01.png,/assets/img/sp01.png',\n      quantities: '1,1,1'\n    }\n  ];\n  \n  // 使用模拟数据\n  orders.value = mockOrders;\n  \n  // 显示提示\n  ElMessage({\n    message: 'API服务不可用，显示模拟订单数据',\n    type: 'warning',\n    duration: 3000\n  });\n};\n\n// 根据选中的标签筛选订单\nconst filteredOrders = computed(() => {\n  if (activeTab.value === 'all') {\n    return orders.value;\n  } else if (activeTab.value === 'inProgress') {\n    // 订单状态：1-已下单/待付款，2-已付款/待接单，3-已接单/配送中\n    return orders.value.filter(order => [1, 2, 3].includes(order.orderState));\n  } else if (activeTab.value === 'toRate') {\n    // 订单状态：5-已完成/待评价\n    return orders.value.filter(order => order.orderState === 5);\n  } else if (activeTab.value === 'refund') {\n    // 订单状态：6-已退款\n    return orders.value.filter(order => order.orderState === 6);\n  }\n  return orders.value;\n});\n\n// 获取食品图片的辅助函数\nconst getFoodImage = (order, index) => {\n  try {\n    // 获取食品图片数组\n    const foodImgs = getArrayFromString(order.foodImgs);\n    console.log(`获取订单 ${order.orderId} 的第 ${index} 个食品图片, 图片数组长度: ${foodImgs.length}`);\n    \n    // 检查索引是否有效\n    if (index >= 0 && index < foodImgs.length) {\n      const imgPath = foodImgs[index];\n      console.log(`食品图片路径: ${imgPath ? (imgPath.length > 50 ? imgPath.substring(0, 50) + '...' : imgPath) : 'null'}`);\n      \n      // 检查是否是Base64编码\n      if (imgPath && imgPath.length > 100) {\n        return sanitizeBase64(imgPath);\n      }\n      \n      // 处理普通图片URL\n      console.log('使用getImageUrl处理普通图片URL');\n      return getImageUrl(imgPath);\n    }\n    \n    // 如果索引无效，返回默认图片\n    console.log('索引无效，返回默认图片');\n    return ''; // 返回空字符串表示没有图片\n  } catch (error) {\n    console.error('获取食品图片出错:', error, error.stack);\n    return ''; // 返回空字符串表示没有图片\n  }\n};\n\n// 获取食品数量的辅助函数\nconst getFoodQuantity = (order, index) => {\n  try {\n    // 获取数量数组\n    const quantities = getArrayFromString(order.quantities);\n    \n    // 检查索引是否有效\n    if (index >= 0 && index < quantities.length) {\n      return quantities[index] || '1';\n    }\n    \n    // 如果索引无效，返回默认值\n    return '1';\n  } catch (error) {\n    console.error('获取食品数量出错:', error);\n    return '1';\n  }\n};\n</script>\n\n<style scoped>\n.wrapper {\n  width: 100%;\n  height: 100%;\n  background-color: #f5f5f5;\n  padding-bottom: 20px;\n}\n\n.header {\n  background-color: white;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  width: 100%;\n  z-index: 10;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.search-bottom {\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  height: 40px;\n}\n\n.back .icon-back {\n  font-size: 20px;\n  padding: 0 10px;\n}\n\n.search-pt {\n  flex: 1;\n  position: relative;\n  display: flex;\n  align-items: center;\n}\n\n.search-pt input {\n  width: 100%;\n  border: none;\n  background-color: #f5f5f5;\n  padding: 8px 8px 8px 30px;\n  border-radius: 20px;\n  font-size: 14px;\n}\n\n.search-pt .icon-sousuo {\n  position: absolute;\n  left: 10px;\n  font-size: 16px;\n  color: #999;\n}\n\n.box span {\n  padding: 0 10px;\n  font-size: 20px;\n}\n\n.information {\n  display: flex;\n  justify-content: space-around;\n  padding: 10px 0;\n  border-bottom: 1px solid #eee;\n}\n\n.information p {\n  padding: 5px 10px;\n  cursor: pointer;\n  position: relative;\n}\n\n.information p.active {\n  color: #0097ff;\n  font-weight: bold;\n}\n\n.information p.active::after {\n  content: '';\n  position: absolute;\n  bottom: -5px;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 20px;\n  height: 3px;\n  background-color: #0097ff;\n  border-radius: 3px;\n}\n\n.body {\n  margin-top: 100px;\n  padding: 10px;\n}\n\n.order-card {\n  background-color: white;\n  border-radius: 10px;\n  margin-bottom: 15px;\n  padding: 15px;\n  box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n}\n\n.order-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-bottom: 10px;\n  border-bottom: 1px solid #f0f0f0;\n}\n\n.business-info {\n  display: flex;\n  align-items: center;\n}\n\n.business-img {\n  width: 50px;\n  height: 50px;\n  border-radius: 5px;\n  object-fit: cover;\n  margin-right: 10px;\n}\n\n.business-details {\n  display: flex;\n  flex-direction: column;\n}\n\n.business-name {\n  font-weight: bold;\n  font-size: 16px;\n  margin-bottom: 5px;\n}\n\n.delivery-price {\n  font-size: 12px;\n  color: #ff6b01;\n  background-color: #fff5e6;\n  padding: 2px 5px;\n  border-radius: 3px;\n  display: inline-block;\n}\n\n.order-price {\n  font-size: 16px;\n  font-weight: bold;\n  color: #333;\n}\n\n.order-content {\n  padding: 10px 0;\n}\n\n.food-list {\n  display: flex;\n  flex-direction: column;\n}\n\n.food-item {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n  background-color: #f9f9f9;\n  border-radius: 8px;\n  padding: 10px;\n}\n\n.food-left {\n  margin-right: 15px;\n}\n\n.food-img {\n  width: 60px;\n  height: 60px;\n  border-radius: 5px;\n  object-fit: cover;\n}\n\n.food-img-placeholder {\n  width: 60px;\n  height: 60px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #f0f0f0;\n  border-radius: 5px;\n}\n\n.food-img-placeholder img {\n  width: 30px;\n  height: 30px;\n}\n\n.food-right {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n.food-name {\n  font-size: 14px;\n  font-weight: 500;\n  margin-bottom: 8px;\n}\n\n.food-quantity {\n  font-size: 12px;\n  color: #666;\n  background-color: #f0f0f0;\n  padding: 2px 8px;\n  border-radius: 12px;\n  display: inline-block;\n  width: fit-content;\n}\n\n.order-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: 10px;\n  border-top: 1px solid #f0f0f0;\n}\n\n.order-date {\n  font-size: 12px;\n  color: #999;\n}\n\n.order-actions {\n  display: flex;\n  gap: 10px;\n}\n\n.reorder-btn, .rating-btn, .rated-btn {\n  border: none;\n  padding: 8px 15px;\n  border-radius: 20px;\n  font-size: 14px;\n  cursor: pointer;\n}\n\n.reorder-btn {\n  background-color: #0097ff;\n  color: white;\n}\n\n.rating-btn {\n  background-color: #ff6b01;\n  color: white;\n}\n\n.rated-btn {\n  background-color: #4caf50;\n  color: white;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}